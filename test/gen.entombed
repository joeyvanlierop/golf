var A_0_0 int
var A_0_1 int
var A_0_2 int
var A_0_3 int
var A_0_4 int
var A_0_5 int
var A_0_6 int
var A_0_7 int
var A_1_0 int
var A_1_1 int
var A_1_2 int
var A_1_3 int
var A_1_4 int
var A_1_5 int
var A_1_6 int
var A_1_7 int
var not_there int
func main() {
var i int
var x int
INTERNALseed(123)
i = 0
for i <= 7 {
if i == 0 {
A_0_0 = 0
A_1_0 = 0
} else if i == 1 {
A_0_1 = 0
A_1_1 = 0
} else if i == 2 {
A_0_2 = 0
A_1_2 = 0
} else if i == 3 {
A_0_3 = 0
A_1_3 = 0
} else if i == 4 {
A_0_4 = 0
A_1_4 = 0
} else if i == 5 {
A_0_5 = 0
A_1_5 = 0
} else if i == 6 {
A_0_6 = 0
A_1_6 = 0
} else if i == 7 {
A_0_7 = 0
A_1_7 = 0
}
i = i + 1
}
x = 1
for x <= 20 {
makerow(0,1)
printrow(1)
makerow(1,0)
printrow(0)
x = x + 1
}
}
func makerow(last int,cur int) {
var i int
var n int
if last == 0 {
if cur == 0 {
i = 0
for i <= 7 {
if i == 0 {
if 0 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 0 == 7 {
n = not_there
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_0_0
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_0_0
n = n * 2 + A_0_1
}
}
A_0_0 = mystery(n)
} else if i == 1 {
if 1 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 1 == 7 {
n = not_there
n = n * 2 + A_0_0
n = n * 2 + A_0_0
n = n * 2 + A_0_1
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_0
n = n * 2 + A_0_0
n = n * 2 + A_0_1
n = n * 2 + A_0_2
}
}
A_0_1 = mystery(n)
} else if i == 2 {
if 2 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 2 == 7 {
n = A_0_0
n = n * 2 + A_0_1
n = n * 2 + A_0_1
n = n * 2 + A_0_2
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_1
n = n * 2 + A_0_1
n = n * 2 + A_0_2
n = n * 2 + A_0_3
}
}
A_0_2 = mystery(n)
} else if i == 3 {
if 3 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 3 == 7 {
n = A_0_1
n = n * 2 + A_0_2
n = n * 2 + A_0_2
n = n * 2 + A_0_3
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_2
n = n * 2 + A_0_2
n = n * 2 + A_0_3
n = n * 2 + A_0_4
}
}
A_0_3 = mystery(n)
} else if i == 4 {
if 4 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 4 == 7 {
n = A_0_2
n = n * 2 + A_0_3
n = n * 2 + A_0_3
n = n * 2 + A_0_4
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_3
n = n * 2 + A_0_3
n = n * 2 + A_0_4
n = n * 2 + A_0_5
}
}
A_0_4 = mystery(n)
} else if i == 5 {
if 5 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 5 == 7 {
n = A_0_3
n = n * 2 + A_0_4
n = n * 2 + A_0_4
n = n * 2 + A_0_5
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_4
n = n * 2 + A_0_4
n = n * 2 + A_0_5
n = n * 2 + A_0_6
}
}
A_0_5 = mystery(n)
} else if i == 6 {
if 6 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 6 == 7 {
n = A_0_4
n = n * 2 + A_0_5
n = n * 2 + A_0_5
n = n * 2 + A_0_6
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_5
n = n * 2 + A_0_5
n = n * 2 + A_0_6
n = n * 2 + A_0_7
}
}
A_0_6 = mystery(n)
} else if i == 7 {
if 7 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 7 == 7 {
n = A_0_5
n = n * 2 + A_0_6
n = n * 2 + A_0_6
n = n * 2 + A_0_7
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_6
n = n * 2 + A_0_6
n = n * 2 + A_0_7
n = n * 2 + not_there
}
}
A_0_7 = mystery(n)
}
i = i + 1
}
} else if cur == 1 {
i = 0
for i <= 7 {
if i == 0 {
if 0 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 0 == 7 {
n = not_there
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_0_0
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_0_0
n = n * 2 + A_0_1
}
}
A_1_0 = mystery(n)
} else if i == 1 {
if 1 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 1 == 7 {
n = not_there
n = n * 2 + A_1_0
n = n * 2 + A_0_0
n = n * 2 + A_0_1
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_0
n = n * 2 + A_0_0
n = n * 2 + A_0_1
n = n * 2 + A_0_2
}
}
A_1_1 = mystery(n)
} else if i == 2 {
if 2 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 2 == 7 {
n = A_1_0
n = n * 2 + A_1_1
n = n * 2 + A_0_1
n = n * 2 + A_0_2
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_1
n = n * 2 + A_0_1
n = n * 2 + A_0_2
n = n * 2 + A_0_3
}
}
A_1_2 = mystery(n)
} else if i == 3 {
if 3 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 3 == 7 {
n = A_1_1
n = n * 2 + A_1_2
n = n * 2 + A_0_2
n = n * 2 + A_0_3
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_2
n = n * 2 + A_0_2
n = n * 2 + A_0_3
n = n * 2 + A_0_4
}
}
A_1_3 = mystery(n)
} else if i == 4 {
if 4 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 4 == 7 {
n = A_1_2
n = n * 2 + A_1_3
n = n * 2 + A_0_3
n = n * 2 + A_0_4
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_3
n = n * 2 + A_0_3
n = n * 2 + A_0_4
n = n * 2 + A_0_5
}
}
A_1_4 = mystery(n)
} else if i == 5 {
if 5 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 5 == 7 {
n = A_1_3
n = n * 2 + A_1_4
n = n * 2 + A_0_4
n = n * 2 + A_0_5
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_4
n = n * 2 + A_0_4
n = n * 2 + A_0_5
n = n * 2 + A_0_6
}
}
A_1_5 = mystery(n)
} else if i == 6 {
if 6 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 6 == 7 {
n = A_1_4
n = n * 2 + A_1_5
n = n * 2 + A_0_5
n = n * 2 + A_0_6
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_5
n = n * 2 + A_0_5
n = n * 2 + A_0_6
n = n * 2 + A_0_7
}
}
A_1_6 = mystery(n)
} else if i == 7 {
if 7 == 0 {
n = 4 + randombit()
n = n * 2 + A_0_0
n = n * 2 + A_0_1
} else {
if 7 == 7 {
n = A_1_5
n = n * 2 + A_1_6
n = n * 2 + A_0_6
n = n * 2 + A_0_7
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_6
n = n * 2 + A_0_6
n = n * 2 + A_0_7
n = n * 2 + not_there
}
}
A_1_7 = mystery(n)
}
i = i + 1
}
}
} else if last == 1 {
if cur == 0 {
i = 0
for i <= 7 {
if i == 0 {
if 0 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 0 == 7 {
n = not_there
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_1_0
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_1_0
n = n * 2 + A_1_1
}
}
A_0_0 = mystery(n)
} else if i == 1 {
if 1 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 1 == 7 {
n = not_there
n = n * 2 + A_0_0
n = n * 2 + A_1_0
n = n * 2 + A_1_1
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_0
n = n * 2 + A_1_0
n = n * 2 + A_1_1
n = n * 2 + A_1_2
}
}
A_0_1 = mystery(n)
} else if i == 2 {
if 2 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 2 == 7 {
n = A_0_0
n = n * 2 + A_0_1
n = n * 2 + A_1_1
n = n * 2 + A_1_2
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_1
n = n * 2 + A_1_1
n = n * 2 + A_1_2
n = n * 2 + A_1_3
}
}
A_0_2 = mystery(n)
} else if i == 3 {
if 3 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 3 == 7 {
n = A_0_1
n = n * 2 + A_0_2
n = n * 2 + A_1_2
n = n * 2 + A_1_3
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_2
n = n * 2 + A_1_2
n = n * 2 + A_1_3
n = n * 2 + A_1_4
}
}
A_0_3 = mystery(n)
} else if i == 4 {
if 4 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 4 == 7 {
n = A_0_2
n = n * 2 + A_0_3
n = n * 2 + A_1_3
n = n * 2 + A_1_4
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_3
n = n * 2 + A_1_3
n = n * 2 + A_1_4
n = n * 2 + A_1_5
}
}
A_0_4 = mystery(n)
} else if i == 5 {
if 5 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 5 == 7 {
n = A_0_3
n = n * 2 + A_0_4
n = n * 2 + A_1_4
n = n * 2 + A_1_5
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_4
n = n * 2 + A_1_4
n = n * 2 + A_1_5
n = n * 2 + A_1_6
}
}
A_0_5 = mystery(n)
} else if i == 6 {
if 6 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 6 == 7 {
n = A_0_4
n = n * 2 + A_0_5
n = n * 2 + A_1_5
n = n * 2 + A_1_6
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_5
n = n * 2 + A_1_5
n = n * 2 + A_1_6
n = n * 2 + A_1_7
}
}
A_0_6 = mystery(n)
} else if i == 7 {
if 7 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 7 == 7 {
n = A_0_5
n = n * 2 + A_0_6
n = n * 2 + A_1_6
n = n * 2 + A_1_7
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_0_6
n = n * 2 + A_1_6
n = n * 2 + A_1_7
n = n * 2 + not_there
}
}
A_0_7 = mystery(n)
}
i = i + 1
}
} else if cur == 1 {
i = 0
for i <= 7 {
if i == 0 {
if 0 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 0 == 7 {
n = not_there
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_1_0
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + not_there
n = n * 2 + not_there
n = n * 2 + A_1_0
n = n * 2 + A_1_1
}
}
A_1_0 = mystery(n)
} else if i == 1 {
if 1 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 1 == 7 {
n = not_there
n = n * 2 + A_1_0
n = n * 2 + A_1_0
n = n * 2 + A_1_1
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_0
n = n * 2 + A_1_0
n = n * 2 + A_1_1
n = n * 2 + A_1_2
}
}
A_1_1 = mystery(n)
} else if i == 2 {
if 2 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 2 == 7 {
n = A_1_0
n = n * 2 + A_1_1
n = n * 2 + A_1_1
n = n * 2 + A_1_2
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_1
n = n * 2 + A_1_1
n = n * 2 + A_1_2
n = n * 2 + A_1_3
}
}
A_1_2 = mystery(n)
} else if i == 3 {
if 3 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 3 == 7 {
n = A_1_1
n = n * 2 + A_1_2
n = n * 2 + A_1_2
n = n * 2 + A_1_3
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_2
n = n * 2 + A_1_2
n = n * 2 + A_1_3
n = n * 2 + A_1_4
}
}
A_1_3 = mystery(n)
} else if i == 4 {
if 4 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 4 == 7 {
n = A_1_2
n = n * 2 + A_1_3
n = n * 2 + A_1_3
n = n * 2 + A_1_4
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_3
n = n * 2 + A_1_3
n = n * 2 + A_1_4
n = n * 2 + A_1_5
}
}
A_1_4 = mystery(n)
} else if i == 5 {
if 5 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 5 == 7 {
n = A_1_3
n = n * 2 + A_1_4
n = n * 2 + A_1_4
n = n * 2 + A_1_5
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_4
n = n * 2 + A_1_4
n = n * 2 + A_1_5
n = n * 2 + A_1_6
}
}
A_1_5 = mystery(n)
} else if i == 6 {
if 6 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 6 == 7 {
n = A_1_4
n = n * 2 + A_1_5
n = n * 2 + A_1_5
n = n * 2 + A_1_6
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_5
n = n * 2 + A_1_5
n = n * 2 + A_1_6
n = n * 2 + A_1_7
}
}
A_1_6 = mystery(n)
} else if i == 7 {
if 7 == 0 {
n = 4 + randombit()
n = n * 2 + A_1_0
n = n * 2 + A_1_1
} else {
if 7 == 7 {
n = A_1_5
n = n * 2 + A_1_6
n = n * 2 + A_1_6
n = n * 2 + A_1_7
n = n * 2 + randombit()
} else {
n = n / 8 % 2
n = n * 2 + A_1_6
n = n * 2 + A_1_6
n = n * 2 + A_1_7
n = n * 2 + not_there
}
}
A_1_7 = mystery(n)
}
i = i + 1
}
}
}
}
func mystery(n int) int {
if n == 0 {
return 1
}
if n == 1 {
return 1
}
if n == 2 {
return 1
}
if n == 3 {
return randombit()
randombit()
}
if n == 4 {
return 0
}
if n == 5 {
return 0
}
if n == 6 {
return randombit()
randombit()
}
if n == 7 {
return randombit()
randombit()
}
if n == 8 {
return 1
}
if n == 9 {
return 1
}
if n == 10 {
return 1
}
if n == 11 {
return 1
}
if n == 12 {
return randombit()
randombit()
}
if n == 13 {
return 0
}
if n == 14 {
return 0
}
if n == 15 {
return 0
}
if n == 16 {
return 1
}
if n == 17 {
return 1
}
if n == 18 {
return 1
}
if n == 19 {
return randombit()
randombit()
}
if n == 20 {
return 0
}
if n == 21 {
return 0
}
if n == 22 {
return 0
}
if n == 23 {
return 0
}
if n == 24 {
return randombit()
randombit()
}
if n == 25 {
return 0
}
if n == 26 {
return 1
}
if n == 27 {
return randombit()
randombit()
}
if n == 28 {
return randombit()
randombit()
}
if n == 29 {
return 0
}
if n == 30 {
return 0
}
if n == 31 {
return 0
}
}
func printbit(b int) {
if b == 1 {
prints("XX")
} else {
prints("  ")
}
}
func printrow(row int) {
var i int
printbit(1)
printbit(1)
i = 0
for i <= 7 {
if i == 0 {
if row == 0 {
printbit(A_0_0)
} else if row == 1 {
printbit(A_1_0)
}
} else if i == 1 {
if row == 0 {
printbit(A_0_1)
} else if row == 1 {
printbit(A_1_1)
}
} else if i == 2 {
if row == 0 {
printbit(A_0_2)
} else if row == 1 {
printbit(A_1_2)
}
} else if i == 3 {
if row == 0 {
printbit(A_0_3)
} else if row == 1 {
printbit(A_1_3)
}
} else if i == 4 {
if row == 0 {
printbit(A_0_4)
} else if row == 1 {
printbit(A_1_4)
}
} else if i == 5 {
if row == 0 {
printbit(A_0_5)
} else if row == 1 {
printbit(A_1_5)
}
} else if i == 6 {
if row == 0 {
printbit(A_0_6)
} else if row == 1 {
printbit(A_1_6)
}
} else if i == 7 {
if row == 0 {
printbit(A_0_7)
} else if row == 1 {
printbit(A_1_7)
}
}
i = i + 1
}
i = 0
for i <= 7 {
if i == 0 {
if row == 0 {
printbit(A_0_7)
} else if row == 1 {
printbit(A_1_7)
}
} else if i == 1 {
if row == 0 {
printbit(A_0_6)
} else if row == 1 {
printbit(A_1_6)
}
} else if i == 2 {
if row == 0 {
printbit(A_0_5)
} else if row == 1 {
printbit(A_1_5)
}
} else if i == 3 {
if row == 0 {
printbit(A_0_4)
} else if row == 1 {
printbit(A_1_4)
}
} else if i == 4 {
if row == 0 {
printbit(A_0_3)
} else if row == 1 {
printbit(A_1_3)
}
} else if i == 5 {
if row == 0 {
printbit(A_0_2)
} else if row == 1 {
printbit(A_1_2)
}
} else if i == 6 {
if row == 0 {
printbit(A_0_1)
} else if row == 1 {
printbit(A_1_1)
}
} else if i == 7 {
if row == 0 {
printbit(A_0_0)
} else if row == 1 {
printbit(A_1_0)
}
}
i = i + 1
}
printbit(1)
printbit(1)
prints("\n")
}
func randombit() int {
return INTERNALrandom() / 4 % 2
INTERNALrandom()
}

	var INTERNALX int

	func INTERNALseed(seed int) {
		INTERNALX = seed
	}
	

	//
	//  Linear congruential method of generating pseudorandom
	//  numbers, from Knuth's _The Art of Computer Programming, Volume 2:
	//  Seminumerical Algorithms_, 3rd edition, Addison-Wesley, 1998.
	//  Constants are chosen using Theorem A on page 17.
	//
	//  XXX - the period is long, but the lsb isn't random!
	//
	func INTERNALrandom() int {
		INTERNALX = (17 * INTERNALX + 13) % 32768
		return INTERNALX
	}
	
