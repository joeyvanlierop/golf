Run started on Tue Feb 28 15:37:38 2023

Hostname: csx2.cs.ucalgary.ca

-------------------------------------------------------------------------------
Running make |
--------------

% /usr/bin/make

STDOUT:
g++ -c src/golf.cpp
g++ -c src/parser.cpp
g++ -g golf.o lexer.o token.o logger.o filereader.o ast.o parser.o -o golf


STDERR:
src/parser.cpp: In member function ‘Token Parser::consume(TokenType)’:
src/parser.cpp:62:1: warning: control reaches end of non-void function [-Wreturn-type]
   62 | }
      | ^
src/parser.cpp: In member function ‘AST* Parser::operand()’:
src/parser.cpp:508:1: warning: control reaches end of non-void function [-Wreturn-type]
  508 | }
      | ^


RETURN CODE: 0

-------------------------------------------------------------------------------
Locating GoLF compiler |
------------------------

Compiler will be run as ./golf

-------------------------------------------------------------------------------
Test: too few arguments |
-------------------------

% ./golf

STDOUT:
Usage: ./golf [filename]


STDERR:


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: too many arguments |
--------------------------

% ./golf /dev/null /dev/zero

STDOUT:
Usage: ./golf [filename]


STDERR:


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: nonexistent file |
------------------------

% ./golf /i/do/not/exist

STDOUT:


STDERR:
File /i/do/not/exist not found: "/home/ugb/joseph.vanlierop/Documents/cpsc-411"


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func open brace in wrong place |
--------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t1

STDOUT:
func     [func] @ (3, 0)
id       [main] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (3, 10)
;        [] @ (3, 11)
{        [{] @ (4, 0)
;        [] @ (5, 1)
}        [}] @ (5, 1)
;        [] @ (5, 2)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t1:3:12
  | 
3 | func main()
  |            ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" open brace exception |
----------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t2

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
{        [{] @ (4, 12)
for      [for] @ (5, 1)
{        [{] @ (6, 1)
;        [] @ (7, 2)
}        [}] @ (7, 2)
;        [] @ (7, 3)
}        [}] @ (8, 0)
;        [] @ (8, 1)
program
	func
		newid [main] @ (4, 5)
		sig
			formals
			typeid [$void]
		block
			for
				id [$true]
				block
					emptystmt


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: "for" open brace in wrong place |
---------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t3

STDOUT:
func     [func] @ (3, 0)
id       [main] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (3, 10)
{        [{] @ (3, 12)
for      [for] @ (4, 1)
id       [true] @ (4, 5)
;        [] @ (4, 9)
{        [{] @ (5, 1)
;        [] @ (6, 2)
}        [}] @ (6, 2)
;        [] @ (6, 3)
}        [}] @ (7, 0)
;        [] @ (7, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t3:4:10
  | 
4 | 	for true
  |          ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" open brace in wrong place |
--------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t4

STDOUT:
func     [func] @ (3, 0)
id       [main] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (3, 10)
{        [{] @ (3, 12)
if       [if] @ (4, 1)
id       [true] @ (4, 4)
;        [] @ (4, 8)
{        [{] @ (5, 1)
;        [] @ (6, 2)
}        [}] @ (6, 2)
;        [] @ (6, 3)
}        [}] @ (7, 0)
;        [] @ (7, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t4:4:9
  | 
4 | 	if true
  |         ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: weird but correct formatting |
------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t5

STDOUT:
func     [func] @ (3, 0)
id       [main] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (4, 0)
{        [{] @ (4, 2)
if       [if] @ (5, 1)
int      [2] @ (5, 4)
+        [+] @ (5, 6)
int      [3] @ (6, 2)
==       [==] @ (6, 4)
int      [5] @ (7, 3)
{        [{] @ (7, 5)
;        [] @ (8, 3)
}        [}] @ (8, 3)
;        [] @ (8, 4)
}        [}] @ (9, 0)
;        [] @ (9, 1)
program
	func
		newid [main] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			if
				== @ (6, 4)
					+ @ (5, 6)
						int [2] @ (5, 4)
						int [3] @ (6, 2)
					int [5] @ (7, 3)
				block
					emptystmt


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: precedence check |
------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t6

STDOUT:
func     [func] @ (4, 0)
id       [foo] @ (4, 5)
(        [(] @ (4, 8)
)        [)] @ (4, 9)
id       [asdf] @ (4, 11)
{        [{] @ (4, 16)
id       [x] @ (5, 1)
=        [=] @ (5, 3)
int      [2] @ (5, 5)
+        [+] @ (5, 7)
int      [3] @ (5, 9)
*        [*] @ (5, 11)
int      [5] @ (5, 13)
;        [] @ (5, 14)
id       [y] @ (6, 1)
=        [=] @ (6, 3)
(        [(] @ (6, 5)
int      [2] @ (6, 6)
+        [+] @ (6, 8)
int      [3] @ (6, 10)
)        [)] @ (6, 11)
*        [*] @ (6, 13)
int      [5] @ (6, 15)
;        [] @ (6, 16)
}        [}] @ (7, 0)
;        [] @ (7, 1)
program
	func
		newid [foo] @ (4, 5)
		sig
			formals
			typeid [asdf] @ (4, 11)
		block
			= @ (5, 3)
				id [x] @ (5, 1)
				+ @ (5, 7)
					int [2] @ (5, 5)
					* @ (5, 11)
						int [3] @ (5, 9)
						int [5] @ (5, 13)
			= @ (6, 3)
				id [y] @ (6, 1)
				* @ (6, 13)
					+ @ (6, 8)
						int [2] @ (6, 6)
						int [3] @ (6, 10)
					int [5] @ (6, 15)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: formal and actual params |
--------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t7

STDOUT:
func     [func] @ (3, 0)
id       [foo] @ (3, 5)
(        [(] @ (3, 8)
)        [)] @ (3, 9)
{        [{] @ (3, 11)
;        [] @ (3, 13)
}        [}] @ (3, 13)
;        [] @ (3, 14)
func     [func] @ (6, 0)
id       [bar] @ (6, 5)
(        [(] @ (6, 8)
id       [a1] @ (6, 9)
id       [int] @ (6, 12)
,        [,] @ (6, 15)
id       [a2] @ (6, 17)
id       [bool] @ (6, 20)
,        [,] @ (6, 24)
id       [a3] @ (6, 26)
id       [sometype] @ (6, 29)
)        [)] @ (6, 37)
id       [returntype] @ (6, 39)
{        [{] @ (6, 50)
;        [] @ (7, 1)
}        [}] @ (7, 1)
;        [] @ (7, 2)
func     [func] @ (9, 0)
id       [baz] @ (9, 5)
(        [(] @ (9, 8)
)        [)] @ (9, 9)
id       [int] @ (9, 11)
{        [{] @ (9, 15)
id       [blarg] @ (10, 1)
(        [(] @ (10, 6)
int      [123] @ (11, 2)
+        [+] @ (11, 6)
int      [456] @ (11, 8)
,        [,] @ (11, 11)
id       [garble] @ (12, 2)
(        [(] @ (12, 8)
int      [789] @ (12, 9)
)        [)] @ (12, 12)
,        [,] @ (12, 13)
id       [true] @ (13, 2)
,        [,] @ (13, 6)
id       [greep] @ (14, 2)
(        [(] @ (14, 7)
id       [false] @ (14, 8)
,        [,] @ (14, 13)
string   [eek] @ (14, 16)
)        [)] @ (14, 20)
)        [)] @ (14, 21)
;        [] @ (14, 22)
}        [}] @ (15, 0)
;        [] @ (15, 1)
program
	func
		newid [foo] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			emptystmt
	func
		newid [bar] @ (6, 5)
		sig
			formals
				formal
					newid [a1] @ (6, 9)
					typeid [int] @ (6, 12)
				formal
					newid [a2] @ (6, 17)
					typeid [bool] @ (6, 20)
				formal
					newid [a3] @ (6, 26)
					typeid [sometype] @ (6, 29)
			typeid [returntype] @ (6, 39)
		block
			emptystmt
	func
		newid [baz] @ (9, 5)
		sig
			formals
			typeid [int] @ (9, 11)
		block
			funccall
				id [blarg] @ (10, 1)
				actuals
					+ @ (11, 6)
						int [123] @ (11, 2)
						int [456] @ (11, 8)
					funccall
						id [garble] @ (12, 2)
						actuals
							int [789] @ (12, 9)
					id [true] @ (13, 2)
					funccall
						id [greep] @ (14, 2)
						actuals
							id [false] @ (14, 8)
							string [eek] @ (14, 16)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: unary and binary minus |
------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t8

STDOUT:
func     [func] @ (3, 0)
id       [main] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (3, 10)
{        [{] @ (3, 12)
id       [x] @ (4, 8)
=        [=] @ (4, 10)
id       [a] @ (4, 12)
-        [-] @ (4, 13)
-        [-] @ (4, 14)
int      [123] @ (4, 15)
;        [] @ (4, 18)
id       [x] @ (5, 8)
=        [=] @ (5, 10)
id       [a] @ (5, 12)
-        [-] @ (5, 13)
-        [-] @ (5, 14)
(        [(] @ (5, 15)
int      [123] @ (5, 16)
)        [)] @ (5, 19)
;        [] @ (5, 20)
id       [x] @ (6, 8)
=        [=] @ (6, 10)
id       [a] @ (6, 12)
-        [-] @ (6, 13)
-        [-] @ (6, 14)
-        [-] @ (6, 15)
int      [123] @ (6, 16)
;        [] @ (6, 19)
id       [x] @ (7, 8)
=        [=] @ (7, 10)
id       [a] @ (7, 12)
-        [-] @ (7, 13)
-        [-] @ (7, 14)
id       [b] @ (7, 15)
;        [] @ (7, 16)
id       [x] @ (8, 8)
=        [=] @ (8, 10)
-        [-] @ (8, 12)
-        [-] @ (8, 13)
-        [-] @ (8, 14)
-        [-] @ (8, 15)
-        [-] @ (8, 16)
-        [-] @ (8, 17)
-        [-] @ (8, 18)
id       [x] @ (8, 19)
;        [] @ (8, 20)
}        [}] @ (9, 0)
;        [] @ (9, 1)
program
	func
		newid [main] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			= @ (4, 10)
				id [x] @ (4, 8)
				- @ (4, 13)
					id [a] @ (4, 12)
					- @ (4, 14)
						int [123] @ (4, 15)
			= @ (5, 10)
				id [x] @ (5, 8)
				- @ (5, 13)
					id [a] @ (5, 12)
					- @ (5, 14)
						int [123] @ (5, 16)
			= @ (6, 10)
				id [x] @ (6, 8)
				- @ (6, 13)
					id [a] @ (6, 12)
					- @ (6, 14)
						- @ (6, 15)
							int [123] @ (6, 16)
			= @ (7, 10)
				id [x] @ (7, 8)
				- @ (7, 13)
					id [a] @ (7, 12)
					- @ (7, 14)
						id [b] @ (7, 15)
			= @ (8, 10)
				id [x] @ (8, 8)
				- @ (8, 12)
					- @ (8, 13)
						- @ (8, 14)
							- @ (8, 15)
								- @ (8, 16)
									- @ (8, 17)
										- @ (8, 18)
											id [x] @ (8, 19)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func open brace in wrong place, with semicolon |
------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t9

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
;        [;] @ (4, 11)
{        [{] @ (5, 0)
;        [] @ (6, 1)
}        [}] @ (6, 1)
;        [] @ (6, 2)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t9:4:12
  | 
4 | func main();
  |            ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func open brace with bonus semicolon |
--------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t10

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
;        [;] @ (4, 11)
{        [{] @ (4, 13)
;        [] @ (5, 1)
}        [}] @ (5, 1)
;        [] @ (5, 2)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t10:4:12
  | 
4 | func main(); {
  |            ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" open brace in wrong place, with semicolon |
-------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t11

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
{        [{] @ (4, 12)
for      [for] @ (5, 1)
id       [true] @ (5, 5)
;        [;] @ (5, 9)
{        [{] @ (6, 1)
;        [] @ (7, 2)
}        [}] @ (7, 2)
;        [] @ (7, 3)
}        [}] @ (8, 0)
;        [] @ (8, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t11:5:10
  | 
5 | 	for true;
  |          ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" with bonus semicolon |
----------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t12

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
{        [{] @ (4, 12)
for      [for] @ (5, 1)
id       [true] @ (5, 5)
;        [;] @ (5, 9)
{        [{] @ (5, 11)
;        [] @ (6, 2)
}        [}] @ (6, 2)
;        [] @ (6, 3)
}        [}] @ (7, 0)
;        [] @ (7, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t12:5:10
  | 
5 | 	for true; {
  |          ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" open brace in wrong place, with semicolon |
------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t13

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
{        [{] @ (4, 12)
if       [if] @ (5, 1)
id       [true] @ (5, 4)
;        [;] @ (5, 8)
{        [{] @ (6, 1)
;        [] @ (7, 2)
}        [}] @ (7, 2)
;        [] @ (7, 3)
}        [}] @ (8, 0)
;        [] @ (8, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t13:5:9
  | 
5 | 	if true;
  |         ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" with bonus semicolon |
---------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t14

STDOUT:
func     [func] @ (4, 0)
id       [main] @ (4, 5)
(        [(] @ (4, 9)
)        [)] @ (4, 10)
{        [{] @ (4, 12)
if       [if] @ (5, 1)
id       [true] @ (5, 4)
;        [;] @ (5, 8)
{        [{] @ (5, 10)
;        [] @ (6, 2)
}        [}] @ (6, 2)
;        [] @ (6, 3)
}        [}] @ (7, 0)
;        [] @ (7, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t14:5:9
  | 
5 | 	if true; {
  |         ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func line breaks using trailing commas |
----------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t15

STDOUT:
func     [func] @ (3, 0)
id       [foo] @ (3, 5)
(        [(] @ (3, 8)
id       [a] @ (3, 9)
id       [int] @ (3, 11)
,        [,] @ (3, 14)
id       [b] @ (4, 1)
id       [int] @ (4, 3)
,        [,] @ (4, 6)
id       [c] @ (5, 1)
id       [int] @ (5, 3)
,        [,] @ (5, 6)
)        [)] @ (6, 0)
{        [{] @ (6, 2)
;        [] @ (6, 5)
}        [}] @ (6, 5)
;        [] @ (6, 6)
program
	func
		newid [foo] @ (3, 5)
		sig
			formals
				formal
					newid [a] @ (3, 9)
					typeid [int] @ (3, 11)
				formal
					newid [b] @ (4, 1)
					typeid [int] @ (4, 3)
				formal
					newid [c] @ (5, 1)
					typeid [int] @ (5, 3)
			typeid [$void]
		block
			emptystmt


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func line breaks sans trailing comma |
--------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t16

STDOUT:
func     [func] @ (4, 0)
id       [foo] @ (4, 5)
(        [(] @ (4, 8)
id       [a] @ (4, 9)
id       [int] @ (4, 11)
,        [,] @ (4, 14)
id       [b] @ (5, 1)
id       [int] @ (5, 3)
,        [,] @ (5, 6)
id       [c] @ (6, 1)
id       [int] @ (6, 3)
;        [] @ (6, 6)
)        [)] @ (7, 0)
{        [{] @ (7, 2)
;        [] @ (7, 5)
}        [}] @ (7, 5)
;        [] @ (7, 6)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t16:6:7
  | 
6 | 	c int
  |       ^ error: expected ), got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func call line breaks with trailing commas |
--------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t17

STDOUT:
func     [func] @ (3, 0)
id       [foo] @ (3, 5)
(        [(] @ (3, 8)
)        [)] @ (3, 9)
{        [{] @ (3, 11)
id       [garbled] @ (4, 1)
(        [(] @ (4, 8)
id       [a] @ (4, 9)
,        [,] @ (4, 10)
id       [b] @ (5, 2)
,        [,] @ (5, 3)
id       [c] @ (6, 2)
,        [,] @ (6, 3)
)        [)] @ (7, 1)
;        [] @ (7, 2)
}        [}] @ (8, 0)
;        [] @ (8, 1)
program
	func
		newid [foo] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			funccall
				id [garbled] @ (4, 1)
				actuals
					id [a] @ (4, 9)
					id [b] @ (5, 2)
					id [c] @ (6, 2)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func call line breaks sans trailing comma |
-------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t18

STDOUT:
func     [func] @ (4, 0)
id       [foo] @ (4, 5)
(        [(] @ (4, 8)
)        [)] @ (4, 9)
{        [{] @ (4, 11)
id       [garbled] @ (5, 1)
(        [(] @ (5, 8)
id       [a] @ (5, 9)
,        [,] @ (5, 10)
id       [b] @ (6, 2)
,        [,] @ (6, 3)
id       [c] @ (7, 2)
;        [] @ (7, 3)
)        [)] @ (8, 1)
;        [] @ (8, 2)
}        [}] @ (9, 0)
;        [] @ (9, 1)


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t18:7:4
  | 
7 | 		c
  |    ^ error: expected ), got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: legit syntax salad |
--------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t19

STDOUT:
func     [func] @ (3, 0)
id       [asdf] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (3, 10)
{        [{] @ (3, 12)
var      [var] @ (4, 1)
id       [i] @ (4, 5)
id       [int] @ (4, 7)
;        [] @ (4, 10)
;        [;] @ (5, 1)
id       [x] @ (6, 1)
=        [=] @ (6, 3)
int      [123] @ (6, 5)
;        [] @ (6, 8)
id       [foo] @ (7, 1)
(        [(] @ (7, 4)
id       [d] @ (7, 5)
)        [)] @ (7, 6)
;        [] @ (7, 7)
(        [(] @ (8, 1)
(        [(] @ (8, 2)
(        [(] @ (8, 3)
id       [bar] @ (8, 4)
)        [)] @ (8, 7)
)        [)] @ (8, 8)
)        [)] @ (8, 9)
(        [(] @ (8, 10)
id       [d] @ (8, 11)
)        [)] @ (8, 12)
;        [] @ (8, 13)
return   [return] @ (9, 1)
;        [] @ (9, 7)
return   [return] @ (10, 1)
int      [12345] @ (10, 8)
;        [] @ (10, 13)
break    [break] @ (11, 1)
;        [] @ (11, 6)
{        [{] @ (12, 1)
id       [ego] @ (13, 2)
;        [] @ (13, 5)
}        [}] @ (14, 1)
;        [] @ (14, 2)
if       [if] @ (15, 1)
id       [true] @ (15, 4)
{        [{] @ (15, 9)
int      [42] @ (16, 2)
;        [] @ (16, 4)
}        [}] @ (17, 1)
;        [] @ (17, 2)
if       [if] @ (18, 1)
id       [false] @ (18, 4)
{        [{] @ (18, 10)
int      [111] @ (19, 2)
;        [] @ (19, 5)
}        [}] @ (20, 1)
else     [else] @ (20, 3)
if       [if] @ (20, 8)
id       [fallse] @ (20, 11)
{        [{] @ (20, 18)
int      [222] @ (21, 2)
;        [] @ (21, 5)
}        [}] @ (22, 1)
else     [else] @ (22, 3)
{        [{] @ (22, 8)
int      [333] @ (23, 2)
;        [] @ (23, 5)
}        [}] @ (24, 1)
;        [] @ (24, 2)
if       [if] @ (25, 1)
(        [(] @ (25, 4)
id       [false] @ (25, 5)
)        [)] @ (25, 10)
{        [{] @ (25, 12)
int      [444] @ (26, 2)
;        [] @ (26, 5)
}        [}] @ (27, 1)
else     [else] @ (27, 3)
{        [{] @ (27, 8)
int      [555] @ (28, 2)
;        [] @ (28, 5)
}        [}] @ (29, 1)
;        [] @ (29, 2)
for      [for] @ (30, 1)
{        [{] @ (30, 5)
int      [666] @ (31, 2)
;        [] @ (31, 5)
}        [}] @ (32, 1)
;        [] @ (32, 2)
for      [for] @ (33, 1)
id       [some_expr] @ (33, 5)
{        [{] @ (33, 15)
int      [777] @ (34, 2)
;        [] @ (34, 5)
}        [}] @ (35, 1)
;        [] @ (35, 2)
string   [abc] @ (37, 2)
=        [=] @ (37, 7)
id       [def] @ (37, 9)
;        [] @ (37, 12)
id       [asdf] @ (38, 1)
+        [+] @ (38, 6)
int      [12] @ (38, 8)
==       [==] @ (38, 11)
int      [4] @ (38, 14)
=        [=] @ (38, 16)
id       [bcd] @ (38, 18)
;        [] @ (38, 21)
}        [}] @ (39, 0)
;        [] @ (39, 1)
program
	func
		newid [asdf] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			var
				newid [i] @ (4, 5)
				typeid [int] @ (4, 7)
			emptystmt
			= @ (6, 3)
				id [x] @ (6, 1)
				int [123] @ (6, 5)
			funccall
				id [foo] @ (7, 1)
				actuals
					id [d] @ (7, 5)
			funccall
				id [bar] @ (8, 4)
				actuals
					id [d] @ (8, 11)
			return
			return
				int [12345] @ (10, 8)
			break
			block
				id [ego] @ (13, 2)
			if
				id [true] @ (15, 4)
				block
					int [42] @ (16, 2)
			if
				id [false] @ (18, 4)
				block
					int [111] @ (19, 2)
				if
					id [fallse] @ (20, 11)
					block
						int [222] @ (21, 2)
					else
						block
							int [333] @ (23, 2)
			if
				id [false] @ (25, 5)
				block
					int [444] @ (26, 2)
				else
					block
						int [555] @ (28, 2)
			for
				id [$true]
				block
					int [666] @ (31, 2)
			for
				id [some_expr] @ (33, 5)
				block
					int [777] @ (34, 2)
			= @ (37, 7)
				string [abc] @ (37, 2)
				id [def] @ (37, 9)
			= @ (38, 16)
				== @ (38, 11)
					+ @ (38, 6)
						id [asdf] @ (38, 1)
						int [12] @ (38, 8)
					int [4] @ (38, 14)
				id [bcd] @ (38, 18)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: assignment |
------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t20

STDOUT:
func     [func] @ (3, 0)
id       [main] @ (3, 5)
(        [(] @ (3, 9)
)        [)] @ (3, 10)
{        [{] @ (3, 12)
var      [var] @ (4, 1)
id       [a] @ (4, 5)
id       [int] @ (4, 7)
;        [] @ (4, 10)
var      [var] @ (5, 1)
id       [b] @ (5, 5)
id       [int] @ (5, 7)
;        [] @ (5, 10)
var      [var] @ (6, 1)
id       [c] @ (6, 5)
id       [int] @ (6, 7)
;        [] @ (6, 10)
id       [a] @ (7, 1)
=        [=] @ (7, 3)
id       [b] @ (7, 5)
=        [=] @ (7, 7)
id       [c] @ (7, 9)
;        [] @ (7, 10)
}        [}] @ (8, 0)
;        [] @ (8, 1)
program
	func
		newid [main] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			var
				newid [a] @ (4, 5)
				typeid [int] @ (4, 7)
			var
				newid [b] @ (5, 5)
				typeid [int] @ (5, 7)
			var
				newid [c] @ (6, 5)
				typeid [int] @ (6, 7)
			= @ (7, 3)
				id [a] @ (7, 1)
				= @ (7, 7)
					id [b] @ (7, 5)
					id [c] @ (7, 9)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: associativity test |
--------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t21

STDOUT:
func     [func] @ (3, 0)
id       [a_sock] @ (3, 5)
(        [(] @ (3, 11)
)        [)] @ (3, 12)
{        [{] @ (3, 14)
var      [var] @ (4, 1)
id       [a] @ (4, 5)
id       [int] @ (4, 7)
;        [] @ (4, 10)
var      [var] @ (5, 1)
id       [b] @ (5, 5)
id       [int] @ (5, 7)
;        [] @ (5, 10)
var      [var] @ (6, 1)
id       [c] @ (6, 5)
id       [int] @ (6, 7)
;        [] @ (6, 10)
var      [var] @ (7, 1)
id       [d] @ (7, 5)
id       [int] @ (7, 7)
;        [] @ (7, 10)
var      [var] @ (8, 1)
id       [e] @ (8, 5)
id       [int] @ (8, 7)
;        [] @ (8, 10)
id       [a] @ (10, 1)
+        [+] @ (10, 3)
id       [b] @ (10, 5)
+        [+] @ (10, 7)
id       [c] @ (10, 9)
+        [+] @ (10, 11)
id       [d] @ (10, 13)
+        [+] @ (10, 15)
id       [e] @ (10, 17)
;        [] @ (10, 18)
id       [a] @ (11, 1)
/        [/] @ (11, 3)
id       [b] @ (11, 5)
/        [/] @ (11, 7)
id       [d] @ (11, 9)
/        [/] @ (11, 11)
id       [d] @ (11, 13)
/        [/] @ (11, 15)
id       [e] @ (11, 17)
;        [] @ (11, 18)
}        [}] @ (12, 0)
;        [] @ (12, 1)
program
	func
		newid [a_sock] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			var
				newid [a] @ (4, 5)
				typeid [int] @ (4, 7)
			var
				newid [b] @ (5, 5)
				typeid [int] @ (5, 7)
			var
				newid [c] @ (6, 5)
				typeid [int] @ (6, 7)
			var
				newid [d] @ (7, 5)
				typeid [int] @ (7, 7)
			var
				newid [e] @ (8, 5)
				typeid [int] @ (8, 7)
			+ @ (10, 15)
				+ @ (10, 11)
					+ @ (10, 7)
						+ @ (10, 3)
							id [a] @ (10, 1)
							id [b] @ (10, 5)
						id [c] @ (10, 9)
					id [d] @ (10, 13)
				id [e] @ (10, 17)
			/ @ (11, 15)
				/ @ (11, 11)
					/ @ (11, 7)
						/ @ (11, 3)
							id [a] @ (11, 1)
							id [b] @ (11, 5)
						id [d] @ (11, 9)
					id [d] @ (11, 13)
				id [e] @ (11, 17)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: a calculated move |
-------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/gen.t18

STDOUT:
func     [func] @ (5, 0)
id       [main] @ (5, 5)
(        [(] @ (5, 9)
)        [)] @ (5, 10)
{        [{] @ (5, 12)
id       [init] @ (6, 1)
(        [(] @ (6, 5)
)        [)] @ (6, 6)
;        [] @ (6, 7)
id       [parser] @ (7, 1)
(        [(] @ (7, 7)
)        [)] @ (7, 8)
;        [] @ (7, 9)
}        [}] @ (8, 0)
;        [] @ (8, 1)
var      [var] @ (14, 0)
id       [_havechar] @ (14, 4)
id       [bool] @ (14, 14)
;        [] @ (14, 18)
var      [var] @ (15, 0)
id       [_char] @ (15, 4)
id       [int] @ (15, 10)
;        [] @ (15, 13)
func     [func] @ (17, 0)
id       [getc] @ (17, 5)
(        [(] @ (17, 9)
)        [)] @ (17, 10)
id       [int] @ (17, 12)
{        [{] @ (17, 16)
if       [if] @ (18, 1)
id       [_havechar] @ (18, 4)
{        [{] @ (18, 14)
id       [_havechar] @ (19, 2)
=        [=] @ (19, 12)
id       [false] @ (19, 14)
;        [] @ (19, 19)
return   [return] @ (20, 2)
id       [_char] @ (20, 9)
;        [] @ (20, 14)
}        [}] @ (21, 1)
;        [] @ (21, 2)
return   [return] @ (22, 1)
id       [getchar] @ (22, 8)
(        [(] @ (22, 15)
)        [)] @ (22, 16)
;        [] @ (22, 17)
}        [}] @ (23, 0)
;        [] @ (23, 1)
func     [func] @ (25, 0)
id       [ungetc] @ (25, 5)
(        [(] @ (25, 11)
id       [ch] @ (25, 12)
id       [int] @ (25, 15)
)        [)] @ (25, 18)
{        [{] @ (25, 20)
if       [if] @ (26, 1)
id       [_havechar] @ (26, 4)
{        [{] @ (26, 14)
id       [prints] @ (27, 2)
(        [(] @ (27, 8)
string   [Internal error: too many ungets!\n] @ (27, 10)
)        [)] @ (27, 45)
;        [] @ (27, 46)
id       [halt] @ (28, 2)
(        [(] @ (28, 6)
)        [)] @ (28, 7)
;        [] @ (28, 8)
}        [}] @ (29, 1)
;        [] @ (29, 2)
id       [_havechar] @ (30, 1)
=        [=] @ (30, 11)
id       [true] @ (30, 13)
;        [] @ (30, 17)
id       [_char] @ (31, 1)
=        [=] @ (31, 7)
id       [ch] @ (31, 9)
;        [] @ (31, 11)
}        [}] @ (32, 0)
;        [] @ (32, 1)
var      [var] @ (38, 0)
id       [_havetoken] @ (38, 4)
id       [bool] @ (38, 15)
;        [] @ (38, 19)
var      [var] @ (39, 0)
id       [_token] @ (39, 4)
id       [int] @ (39, 11)
;        [] @ (39, 14)
var      [var] @ (40, 0)
id       [attr] @ (40, 4)
id       [int] @ (40, 9)
;        [] @ (40, 12)
func     [func] @ (42, 0)
id       [peek] @ (42, 5)
(        [(] @ (42, 9)
)        [)] @ (42, 10)
id       [int] @ (42, 12)
{        [{] @ (42, 16)
if       [if] @ (43, 1)
id       [_havetoken] @ (43, 4)
{        [{] @ (43, 15)
return   [return] @ (44, 2)
id       [_token] @ (44, 9)
;        [] @ (44, 15)
}        [}] @ (45, 1)
;        [] @ (45, 2)
id       [_havetoken] @ (46, 1)
=        [=] @ (46, 12)
id       [true] @ (46, 14)
;        [] @ (46, 18)
id       [_token] @ (47, 1)
=        [=] @ (47, 8)
id       [scanner] @ (47, 10)
(        [(] @ (47, 17)
)        [)] @ (47, 18)
;        [] @ (47, 19)
return   [return] @ (48, 1)
id       [_token] @ (48, 8)
;        [] @ (48, 14)
}        [}] @ (49, 0)
;        [] @ (49, 1)
func     [func] @ (51, 0)
id       [match] @ (51, 5)
(        [(] @ (51, 10)
id       [expect] @ (51, 11)
id       [int] @ (51, 18)
)        [)] @ (51, 21)
{        [{] @ (51, 23)
if       [if] @ (52, 1)
id       [peek] @ (52, 4)
(        [(] @ (52, 8)
)        [)] @ (52, 9)
!=       [!=] @ (52, 11)
id       [expect] @ (52, 14)
{        [{] @ (52, 21)
id       [prints] @ (53, 2)
(        [(] @ (53, 8)
string   [Error: expected ] @ (53, 10)
)        [)] @ (53, 27)
;        [] @ (53, 28)
id       [printc] @ (54, 2)
(        [(] @ (54, 8)
id       [expect] @ (54, 9)
)        [)] @ (54, 15)
;        [] @ (54, 48)
id       [prints] @ (55, 2)
(        [(] @ (55, 8)
string   [\n] @ (55, 10)
)        [)] @ (55, 13)
;        [] @ (55, 14)
id       [halt] @ (56, 2)
(        [(] @ (56, 6)
)        [)] @ (56, 7)
;        [] @ (56, 8)
}        [}] @ (57, 1)
;        [] @ (57, 2)
id       [_havetoken] @ (58, 1)
=        [=] @ (58, 12)
id       [false] @ (58, 14)
;        [] @ (58, 19)
}        [}] @ (59, 0)
;        [] @ (59, 1)
func     [func] @ (61, 0)
id       [scanner] @ (61, 5)
(        [(] @ (61, 12)
)        [)] @ (61, 13)
id       [int] @ (61, 15)
{        [{] @ (61, 19)
var      [var] @ (62, 1)
id       [ch] @ (62, 5)
id       [int] @ (62, 8)
;        [] @ (62, 11)
for      [for] @ (64, 1)
{        [{] @ (64, 5)
id       [ch] @ (65, 2)
=        [=] @ (65, 5)
id       [getc] @ (65, 7)
(        [(] @ (65, 11)
)        [)] @ (65, 12)
;        [] @ (65, 13)
if       [if] @ (66, 2)
!        [!] @ (66, 5)
id       [isspace] @ (66, 6)
(        [(] @ (66, 13)
id       [ch] @ (66, 14)
)        [)] @ (66, 16)
{        [{] @ (66, 18)
break    [break] @ (67, 3)
;        [] @ (67, 8)
}        [}] @ (68, 2)
;        [] @ (68, 3)
}        [}] @ (69, 1)
;        [] @ (69, 2)
if       [if] @ (71, 1)
id       [ch] @ (71, 4)
==       [==] @ (71, 7)
id       [EOF] @ (71, 10)
{        [{] @ (71, 16)
return   [return] @ (71, 18)
id       [TK_EOF] @ (71, 25)
;        [] @ (71, 33)
}        [}] @ (71, 33)
;        [] @ (71, 34)
if       [if] @ (72, 1)
id       [ch] @ (72, 4)
==       [==] @ (72, 7)
id       [ASCII_NL] @ (72, 10)
{        [{] @ (72, 20)
return   [return] @ (72, 22)
id       [TK_EOLN] @ (72, 29)
;        [] @ (72, 38)
}        [}] @ (72, 38)
;        [] @ (72, 39)
if       [if] @ (73, 1)
id       [ch] @ (73, 4)
==       [==] @ (73, 7)
id       [ASCII_PLUS] @ (73, 10)
{        [{] @ (73, 22)
return   [return] @ (73, 24)
id       [TK_ADD] @ (73, 31)
;        [] @ (73, 39)
}        [}] @ (73, 39)
;        [] @ (73, 40)
if       [if] @ (74, 1)
id       [ch] @ (74, 4)
==       [==] @ (74, 7)
id       [ASCII_MINUS] @ (74, 10)
{        [{] @ (74, 23)
return   [return] @ (74, 25)
id       [TK_SUB] @ (74, 32)
;        [] @ (74, 40)
}        [}] @ (74, 40)
;        [] @ (74, 41)
if       [if] @ (75, 1)
id       [ch] @ (75, 4)
==       [==] @ (75, 7)
id       [ASCII_STAR] @ (75, 10)
{        [{] @ (75, 22)
return   [return] @ (75, 24)
id       [TK_MUL] @ (75, 31)
;        [] @ (75, 39)
}        [}] @ (75, 39)
;        [] @ (75, 40)
if       [if] @ (76, 1)
id       [ch] @ (76, 4)
==       [==] @ (76, 7)
id       [ASCII_SLASH] @ (76, 10)
{        [{] @ (76, 23)
return   [return] @ (76, 25)
id       [TK_DIV] @ (76, 32)
;        [] @ (76, 40)
}        [}] @ (76, 40)
;        [] @ (76, 41)
if       [if] @ (77, 1)
id       [ch] @ (77, 4)
==       [==] @ (77, 7)
id       [ASCII_LPAREN] @ (77, 10)
{        [{] @ (77, 24)
return   [return] @ (77, 26)
id       [TK_LPAREN] @ (77, 33)
;        [] @ (77, 44)
}        [}] @ (77, 44)
;        [] @ (77, 45)
if       [if] @ (78, 1)
id       [ch] @ (78, 4)
==       [==] @ (78, 7)
id       [ASCII_RPAREN] @ (78, 10)
{        [{] @ (78, 24)
return   [return] @ (78, 26)
id       [TK_RPAREN] @ (78, 33)
;        [] @ (78, 44)
}        [}] @ (78, 44)
;        [] @ (78, 45)
if       [if] @ (80, 1)
id       [isdigit] @ (80, 4)
(        [(] @ (80, 11)
id       [ch] @ (80, 12)
)        [)] @ (80, 14)
{        [{] @ (80, 16)
id       [attr] @ (81, 2)
=        [=] @ (81, 7)
int      [0] @ (81, 9)
;        [] @ (81, 10)
for      [for] @ (82, 2)
id       [isdigit] @ (82, 6)
(        [(] @ (82, 13)
id       [ch] @ (82, 14)
)        [)] @ (82, 16)
{        [{] @ (82, 18)
id       [attr] @ (83, 3)
=        [=] @ (83, 8)
id       [attr] @ (83, 10)
*        [*] @ (83, 15)
int      [10] @ (83, 17)
+        [+] @ (83, 20)
(        [(] @ (83, 22)
id       [ch] @ (83, 23)
-        [-] @ (83, 26)
id       [ASCII_0] @ (83, 28)
)        [)] @ (83, 35)
;        [] @ (83, 36)
id       [ch] @ (84, 3)
=        [=] @ (84, 6)
id       [getc] @ (84, 8)
(        [(] @ (84, 12)
)        [)] @ (84, 13)
;        [] @ (84, 14)
}        [}] @ (85, 2)
;        [] @ (85, 3)
id       [ungetc] @ (86, 2)
(        [(] @ (86, 8)
id       [ch] @ (86, 9)
)        [)] @ (86, 11)
;        [] @ (86, 12)
return   [return] @ (87, 2)
id       [TK_NUMBER] @ (87, 9)
;        [] @ (87, 18)
}        [}] @ (88, 1)
;        [] @ (88, 2)
id       [prints] @ (90, 1)
(        [(] @ (90, 7)
string   [Error: invalid character.\n] @ (90, 9)
)        [)] @ (90, 37)
;        [] @ (90, 38)
id       [halt] @ (91, 1)
(        [(] @ (91, 5)
)        [)] @ (91, 6)
;        [] @ (91, 7)
}        [}] @ (92, 0)
;        [] @ (92, 1)
func     [func] @ (94, 0)
id       [isdigit] @ (94, 5)
(        [(] @ (94, 12)
id       [ch] @ (94, 13)
id       [int] @ (94, 16)
)        [)] @ (94, 19)
id       [bool] @ (94, 21)
{        [{] @ (94, 26)
return   [return] @ (95, 1)
id       [ch] @ (95, 8)
>=       [>=] @ (95, 11)
id       [ASCII_0] @ (95, 14)
&&       [&&] @ (95, 22)
id       [ch] @ (95, 25)
<=       [<=] @ (95, 28)
id       [ASCII_9] @ (95, 31)
;        [] @ (95, 38)
}        [}] @ (96, 0)
;        [] @ (96, 1)
func     [func] @ (98, 0)
id       [isspace] @ (98, 5)
(        [(] @ (98, 12)
id       [ch] @ (98, 13)
id       [int] @ (98, 16)
)        [)] @ (98, 19)
id       [bool] @ (98, 21)
{        [{] @ (98, 26)
return   [return] @ (99, 1)
id       [ch] @ (99, 8)
==       [==] @ (99, 11)
id       [ASCII_SPACE] @ (99, 14)
||       [||] @ (99, 26)
id       [ch] @ (100, 8)
==       [==] @ (100, 11)
id       [ASCII_TAB] @ (100, 14)
||       [||] @ (100, 24)
id       [ch] @ (101, 8)
==       [==] @ (101, 11)
id       [ASCII_CR] @ (101, 14)
;        [] @ (101, 22)
}        [}] @ (102, 0)
;        [] @ (102, 1)
func     [func] @ (108, 0)
id       [parser] @ (108, 5)
(        [(] @ (108, 11)
)        [)] @ (108, 12)
{        [{] @ (108, 14)
var      [var] @ (109, 1)
id       [result] @ (109, 5)
id       [int] @ (109, 12)
;        [] @ (109, 15)
for      [for] @ (111, 1)
id       [peek] @ (111, 5)
(        [(] @ (111, 9)
)        [)] @ (111, 10)
!=       [!=] @ (111, 12)
id       [TK_EOF] @ (111, 15)
{        [{] @ (111, 22)
id       [result] @ (112, 2)
=        [=] @ (112, 9)
id       [E] @ (112, 11)
(        [(] @ (112, 12)
)        [)] @ (112, 13)
;        [] @ (112, 14)
id       [match] @ (113, 2)
(        [(] @ (113, 7)
id       [TK_EOLN] @ (113, 8)
)        [)] @ (113, 15)
;        [] @ (113, 16)
id       [prints] @ (115, 2)
(        [(] @ (115, 8)
string   [ = ] @ (115, 10)
)        [)] @ (115, 14)
;        [] @ (115, 15)
id       [printi] @ (116, 2)
(        [(] @ (116, 8)
id       [result] @ (116, 9)
)        [)] @ (116, 15)
;        [] @ (116, 16)
id       [prints] @ (117, 2)
(        [(] @ (117, 8)
string   [\n] @ (117, 10)
)        [)] @ (117, 13)
;        [] @ (117, 14)
}        [}] @ (118, 1)
;        [] @ (118, 2)
}        [}] @ (119, 0)
;        [] @ (119, 1)
func     [func] @ (121, 0)
id       [E] @ (121, 5)
(        [(] @ (121, 6)
)        [)] @ (121, 7)
id       [int] @ (121, 9)
{        [{] @ (121, 13)
var      [var] @ (122, 1)
id       [l] @ (122, 5)
id       [int] @ (122, 7)
;        [] @ (122, 10)
var      [var] @ (123, 1)
id       [r] @ (123, 5)
id       [int] @ (123, 7)
;        [] @ (123, 10)
var      [var] @ (124, 1)
id       [token] @ (124, 5)
id       [int] @ (124, 11)
;        [] @ (124, 14)
id       [l] @ (126, 1)
=        [=] @ (126, 3)
id       [T] @ (126, 5)
(        [(] @ (126, 6)
)        [)] @ (126, 7)
;        [] @ (126, 8)
for      [for] @ (127, 1)
id       [peek] @ (127, 5)
(        [(] @ (127, 9)
)        [)] @ (127, 10)
==       [==] @ (127, 12)
id       [TK_ADD] @ (127, 15)
||       [||] @ (127, 22)
id       [peek] @ (127, 25)
(        [(] @ (127, 29)
)        [)] @ (127, 30)
==       [==] @ (127, 32)
id       [TK_SUB] @ (127, 35)
{        [{] @ (127, 42)
id       [token] @ (128, 2)
=        [=] @ (128, 8)
id       [peek] @ (128, 10)
(        [(] @ (128, 14)
)        [)] @ (128, 15)
;        [] @ (128, 16)
id       [match] @ (129, 2)
(        [(] @ (129, 7)
id       [token] @ (129, 8)
)        [)] @ (129, 13)
;        [] @ (129, 14)
id       [r] @ (130, 2)
=        [=] @ (130, 4)
id       [T] @ (130, 6)
(        [(] @ (130, 7)
)        [)] @ (130, 8)
;        [] @ (130, 9)
if       [if] @ (132, 2)
id       [token] @ (132, 5)
==       [==] @ (132, 11)
id       [TK_ADD] @ (132, 14)
{        [{] @ (132, 21)
id       [l] @ (133, 3)
=        [=] @ (133, 5)
id       [l] @ (133, 7)
+        [+] @ (133, 9)
id       [r] @ (133, 11)
;        [] @ (133, 12)
}        [}] @ (134, 2)
else     [else] @ (134, 4)
{        [{] @ (134, 9)
id       [l] @ (135, 3)
=        [=] @ (135, 5)
id       [l] @ (135, 7)
-        [-] @ (135, 9)
id       [r] @ (135, 11)
;        [] @ (135, 12)
}        [}] @ (136, 2)
;        [] @ (136, 3)
}        [}] @ (137, 1)
;        [] @ (137, 2)
return   [return] @ (138, 1)
id       [l] @ (138, 8)
;        [] @ (138, 9)
}        [}] @ (139, 0)
;        [] @ (139, 1)
func     [func] @ (141, 0)
id       [T] @ (141, 5)
(        [(] @ (141, 6)
)        [)] @ (141, 7)
id       [int] @ (141, 9)
{        [{] @ (141, 13)
var      [var] @ (142, 1)
id       [l] @ (142, 5)
id       [int] @ (142, 7)
;        [] @ (142, 10)
var      [var] @ (143, 1)
id       [r] @ (143, 5)
id       [int] @ (143, 7)
;        [] @ (143, 10)
var      [var] @ (144, 1)
id       [token] @ (144, 5)
id       [int] @ (144, 11)
;        [] @ (144, 14)
id       [l] @ (146, 1)
=        [=] @ (146, 3)
id       [F] @ (146, 5)
(        [(] @ (146, 6)
)        [)] @ (146, 7)
;        [] @ (146, 8)
for      [for] @ (147, 1)
id       [peek] @ (147, 5)
(        [(] @ (147, 9)
)        [)] @ (147, 10)
==       [==] @ (147, 12)
id       [TK_MUL] @ (147, 15)
||       [||] @ (147, 22)
id       [peek] @ (147, 25)
(        [(] @ (147, 29)
)        [)] @ (147, 30)
==       [==] @ (147, 32)
id       [TK_DIV] @ (147, 35)
{        [{] @ (147, 42)
id       [token] @ (148, 2)
=        [=] @ (148, 8)
id       [peek] @ (148, 10)
(        [(] @ (148, 14)
)        [)] @ (148, 15)
;        [] @ (148, 16)
id       [match] @ (149, 2)
(        [(] @ (149, 7)
id       [token] @ (149, 8)
)        [)] @ (149, 13)
;        [] @ (149, 14)
id       [r] @ (150, 2)
=        [=] @ (150, 4)
id       [F] @ (150, 6)
(        [(] @ (150, 7)
)        [)] @ (150, 8)
;        [] @ (150, 9)
if       [if] @ (152, 2)
id       [token] @ (152, 5)
==       [==] @ (152, 11)
id       [TK_MUL] @ (152, 14)
{        [{] @ (152, 21)
id       [l] @ (153, 3)
=        [=] @ (153, 5)
id       [l] @ (153, 7)
*        [*] @ (153, 9)
id       [r] @ (153, 11)
;        [] @ (153, 12)
}        [}] @ (154, 2)
else     [else] @ (154, 4)
{        [{] @ (154, 9)
id       [l] @ (155, 3)
=        [=] @ (155, 5)
id       [l] @ (155, 7)
/        [/] @ (155, 9)
id       [r] @ (155, 11)
;        [] @ (155, 12)
}        [}] @ (156, 2)
;        [] @ (156, 3)
}        [}] @ (157, 1)
;        [] @ (157, 2)
return   [return] @ (158, 1)
id       [l] @ (158, 8)
;        [] @ (158, 9)
}        [}] @ (159, 0)
;        [] @ (159, 1)
func     [func] @ (161, 0)
id       [F] @ (161, 5)
(        [(] @ (161, 6)
)        [)] @ (161, 7)
id       [int] @ (161, 9)
{        [{] @ (161, 13)
var      [var] @ (162, 1)
id       [result] @ (162, 5)
id       [int] @ (162, 12)
;        [] @ (162, 15)
var      [var] @ (164, 1)
id       [token] @ (164, 5)
id       [int] @ (164, 11)
;        [] @ (164, 14)
id       [token] @ (165, 1)
=        [=] @ (165, 7)
id       [peek] @ (165, 9)
(        [(] @ (165, 13)
)        [)] @ (165, 14)
;        [] @ (165, 15)
if       [if] @ (167, 1)
id       [token] @ (167, 4)
==       [==] @ (167, 10)
id       [TK_LPAREN] @ (167, 13)
{        [{] @ (167, 23)
id       [match] @ (168, 2)
(        [(] @ (168, 7)
id       [TK_LPAREN] @ (168, 8)
)        [)] @ (168, 17)
;        [] @ (168, 18)
id       [result] @ (169, 2)
=        [=] @ (169, 9)
id       [E] @ (169, 11)
(        [(] @ (169, 12)
)        [)] @ (169, 13)
;        [] @ (169, 14)
id       [match] @ (170, 2)
(        [(] @ (170, 7)
id       [TK_RPAREN] @ (170, 8)
)        [)] @ (170, 17)
;        [] @ (170, 18)
}        [}] @ (172, 1)
else     [else] @ (172, 3)
if       [if] @ (172, 8)
id       [token] @ (172, 11)
==       [==] @ (172, 17)
id       [TK_SUB] @ (172, 20)
{        [{] @ (172, 27)
id       [match] @ (173, 2)
(        [(] @ (173, 7)
id       [TK_SUB] @ (173, 8)
)        [)] @ (173, 14)
;        [] @ (173, 15)
id       [result] @ (174, 2)
=        [=] @ (174, 9)
-        [-] @ (174, 11)
id       [F] @ (174, 12)
(        [(] @ (174, 13)
)        [)] @ (174, 14)
;        [] @ (174, 15)
}        [}] @ (176, 1)
else     [else] @ (176, 3)
if       [if] @ (176, 8)
id       [token] @ (176, 11)
==       [==] @ (176, 17)
id       [TK_NUMBER] @ (176, 20)
{        [{] @ (176, 30)
id       [match] @ (177, 2)
(        [(] @ (177, 7)
id       [TK_NUMBER] @ (177, 8)
)        [)] @ (177, 17)
;        [] @ (177, 18)
id       [result] @ (178, 2)
=        [=] @ (178, 9)
id       [attr] @ (178, 11)
;        [] @ (178, 15)
}        [}] @ (180, 1)
else     [else] @ (180, 3)
{        [{] @ (180, 8)
id       [prints] @ (181, 2)
(        [(] @ (181, 8)
string   [Error: expected factor.\n] @ (181, 10)
)        [)] @ (181, 36)
;        [] @ (181, 37)
id       [halt] @ (182, 2)
(        [(] @ (182, 6)
)        [)] @ (182, 7)
;        [] @ (182, 8)
}        [}] @ (183, 1)
;        [] @ (183, 2)
return   [return] @ (184, 1)
id       [result] @ (184, 8)
;        [] @ (184, 14)
}        [}] @ (185, 0)
;        [] @ (185, 1)
var      [var] @ (191, 0)
id       [EOF] @ (191, 4)
id       [int] @ (191, 8)
;        [] @ (191, 11)
var      [var] @ (193, 0)
id       [TK_EOF] @ (193, 4)
id       [int] @ (193, 11)
;        [] @ (193, 14)
var      [var] @ (194, 0)
id       [TK_EOLN] @ (194, 4)
id       [int] @ (194, 12)
;        [] @ (194, 15)
var      [var] @ (195, 0)
id       [TK_NUMBER] @ (195, 4)
id       [int] @ (195, 14)
;        [] @ (195, 17)
var      [var] @ (196, 0)
id       [TK_ADD] @ (196, 4)
id       [int] @ (196, 11)
;        [] @ (196, 14)
var      [var] @ (197, 0)
id       [TK_SUB] @ (197, 4)
id       [int] @ (197, 11)
;        [] @ (197, 14)
var      [var] @ (198, 0)
id       [TK_MUL] @ (198, 4)
id       [int] @ (198, 11)
;        [] @ (198, 14)
var      [var] @ (199, 0)
id       [TK_DIV] @ (199, 4)
id       [int] @ (199, 11)
;        [] @ (199, 14)
var      [var] @ (200, 0)
id       [TK_LPAREN] @ (200, 4)
id       [int] @ (200, 14)
;        [] @ (200, 17)
var      [var] @ (201, 0)
id       [TK_RPAREN] @ (201, 4)
id       [int] @ (201, 14)
;        [] @ (201, 17)
var      [var] @ (203, 0)
id       [ASCII_0] @ (203, 4)
id       [int] @ (203, 12)
;        [] @ (203, 15)
var      [var] @ (204, 0)
id       [ASCII_9] @ (204, 4)
id       [int] @ (204, 12)
;        [] @ (204, 15)
var      [var] @ (205, 0)
id       [ASCII_PLUS] @ (205, 4)
id       [int] @ (205, 15)
;        [] @ (205, 18)
var      [var] @ (206, 0)
id       [ASCII_MINUS] @ (206, 4)
id       [int] @ (206, 16)
;        [] @ (206, 19)
var      [var] @ (207, 0)
id       [ASCII_STAR] @ (207, 4)
id       [int] @ (207, 15)
;        [] @ (207, 18)
var      [var] @ (208, 0)
id       [ASCII_SLASH] @ (208, 4)
id       [int] @ (208, 16)
;        [] @ (208, 19)
var      [var] @ (209, 0)
id       [ASCII_LPAREN] @ (209, 4)
id       [int] @ (209, 17)
;        [] @ (209, 20)
var      [var] @ (210, 0)
id       [ASCII_RPAREN] @ (210, 4)
id       [int] @ (210, 17)
;        [] @ (210, 20)
var      [var] @ (211, 0)
id       [ASCII_SPACE] @ (211, 4)
id       [int] @ (211, 16)
;        [] @ (211, 19)
var      [var] @ (212, 0)
id       [ASCII_TAB] @ (212, 4)
id       [int] @ (212, 14)
;        [] @ (212, 17)
var      [var] @ (213, 0)
id       [ASCII_CR] @ (213, 4)
id       [int] @ (213, 13)
;        [] @ (213, 16)
var      [var] @ (214, 0)
id       [ASCII_NL] @ (214, 4)
id       [int] @ (214, 13)
;        [] @ (214, 16)
func     [func] @ (216, 0)
id       [init] @ (216, 5)
(        [(] @ (216, 9)
)        [)] @ (216, 10)
{        [{] @ (216, 12)
id       [EOF] @ (217, 1)
=        [=] @ (217, 5)
-        [-] @ (217, 7)
int      [1] @ (217, 8)
;        [] @ (217, 9)
id       [ASCII_0] @ (219, 1)
=        [=] @ (219, 9)
int      [48] @ (219, 11)
;        [] @ (219, 13)
id       [ASCII_9] @ (220, 1)
=        [=] @ (220, 9)
int      [57] @ (220, 11)
;        [] @ (220, 13)
id       [ASCII_PLUS] @ (221, 1)
=        [=] @ (221, 12)
int      [43] @ (221, 14)
;        [] @ (221, 16)
id       [ASCII_MINUS] @ (222, 1)
=        [=] @ (222, 13)
int      [45] @ (222, 15)
;        [] @ (222, 17)
id       [ASCII_STAR] @ (223, 1)
=        [=] @ (223, 12)
int      [42] @ (223, 14)
;        [] @ (223, 16)
id       [ASCII_SLASH] @ (224, 1)
=        [=] @ (224, 13)
int      [47] @ (224, 15)
;        [] @ (224, 17)
id       [ASCII_LPAREN] @ (225, 1)
=        [=] @ (225, 14)
int      [40] @ (225, 16)
;        [] @ (225, 18)
id       [ASCII_RPAREN] @ (226, 1)
=        [=] @ (226, 14)
int      [41] @ (226, 16)
;        [] @ (226, 18)
id       [ASCII_SPACE] @ (227, 1)
=        [=] @ (227, 13)
int      [32] @ (227, 15)
;        [] @ (227, 17)
id       [ASCII_TAB] @ (228, 1)
=        [=] @ (228, 11)
int      [9] @ (228, 13)
;        [] @ (228, 14)
id       [ASCII_CR] @ (229, 1)
=        [=] @ (229, 10)
int      [13] @ (229, 12)
;        [] @ (229, 14)
id       [ASCII_NL] @ (230, 1)
=        [=] @ (230, 10)
int      [10] @ (230, 12)
;        [] @ (230, 14)
id       [TK_EOF] @ (232, 1)
=        [=] @ (232, 8)
int      [256] @ (232, 10)
;        [] @ (232, 13)
id       [TK_NUMBER] @ (233, 1)
=        [=] @ (233, 11)
int      [257] @ (233, 13)
;        [] @ (233, 16)
id       [TK_ADD] @ (234, 1)
=        [=] @ (234, 8)
id       [ASCII_PLUS] @ (234, 10)
;        [] @ (234, 20)
id       [TK_SUB] @ (235, 1)
=        [=] @ (235, 8)
id       [ASCII_MINUS] @ (235, 10)
;        [] @ (235, 21)
id       [TK_MUL] @ (236, 1)
=        [=] @ (236, 8)
id       [ASCII_STAR] @ (236, 10)
;        [] @ (236, 20)
id       [TK_DIV] @ (237, 1)
=        [=] @ (237, 8)
id       [ASCII_SLASH] @ (237, 10)
;        [] @ (237, 21)
id       [TK_LPAREN] @ (238, 1)
=        [=] @ (238, 11)
id       [ASCII_LPAREN] @ (238, 13)
;        [] @ (238, 25)
id       [TK_RPAREN] @ (239, 1)
=        [=] @ (239, 11)
id       [ASCII_RPAREN] @ (239, 13)
;        [] @ (239, 25)
id       [TK_EOLN] @ (240, 1)
=        [=] @ (240, 9)
id       [ASCII_NL] @ (240, 11)
;        [] @ (240, 19)
}        [}] @ (241, 0)
;        [] @ (241, 1)
program
	func
		newid [main] @ (5, 5)
		sig
			formals
			typeid [$void]
		block
			funccall
				id [init] @ (6, 1)
				actuals
			funccall
				id [parser] @ (7, 1)
				actuals
	var
		newid [_havechar] @ (14, 4)
		typeid [bool] @ (14, 14)
	var
		newid [_char] @ (15, 4)
		typeid [int] @ (15, 10)
	func
		newid [getc] @ (17, 5)
		sig
			formals
			typeid [int] @ (17, 12)
		block
			if
				id [_havechar] @ (18, 4)
				block
					= @ (19, 12)
						id [_havechar] @ (19, 2)
						id [false] @ (19, 14)
					return
						id [_char] @ (20, 9)
			return
				funccall
					id [getchar] @ (22, 8)
					actuals
	func
		newid [ungetc] @ (25, 5)
		sig
			formals
				formal
					newid [ch] @ (25, 12)
					typeid [int] @ (25, 15)
			typeid [$void]
		block
			if
				id [_havechar] @ (26, 4)
				block
					funccall
						id [prints] @ (27, 2)
						actuals
							string [Internal error: too many ungets!\n] @ (27, 10)
					funccall
						id [halt] @ (28, 2)
						actuals
			= @ (30, 11)
				id [_havechar] @ (30, 1)
				id [true] @ (30, 13)
			= @ (31, 7)
				id [_char] @ (31, 1)
				id [ch] @ (31, 9)
	var
		newid [_havetoken] @ (38, 4)
		typeid [bool] @ (38, 15)
	var
		newid [_token] @ (39, 4)
		typeid [int] @ (39, 11)
	var
		newid [attr] @ (40, 4)
		typeid [int] @ (40, 9)
	func
		newid [peek] @ (42, 5)
		sig
			formals
			typeid [int] @ (42, 12)
		block
			if
				id [_havetoken] @ (43, 4)
				block
					return
						id [_token] @ (44, 9)
			= @ (46, 12)
				id [_havetoken] @ (46, 1)
				id [true] @ (46, 14)
			= @ (47, 8)
				id [_token] @ (47, 1)
				funccall
					id [scanner] @ (47, 10)
					actuals
			return
				id [_token] @ (48, 8)
	func
		newid [match] @ (51, 5)
		sig
			formals
				formal
					newid [expect] @ (51, 11)
					typeid [int] @ (51, 18)
			typeid [$void]
		block
			if
				!= @ (52, 11)
					funccall
						id [peek] @ (52, 4)
						actuals
					id [expect] @ (52, 14)
				block
					funccall
						id [prints] @ (53, 2)
						actuals
							string [Error: expected ] @ (53, 10)
					funccall
						id [printc] @ (54, 2)
						actuals
							id [expect] @ (54, 9)
					funccall
						id [prints] @ (55, 2)
						actuals
							string [\n] @ (55, 10)
					funccall
						id [halt] @ (56, 2)
						actuals
			= @ (58, 12)
				id [_havetoken] @ (58, 1)
				id [false] @ (58, 14)
	func
		newid [scanner] @ (61, 5)
		sig
			formals
			typeid [int] @ (61, 15)
		block
			var
				newid [ch] @ (62, 5)
				typeid [int] @ (62, 8)
			for
				id [$true]
				block
					= @ (65, 5)
						id [ch] @ (65, 2)
						funccall
							id [getc] @ (65, 7)
							actuals
					if
						! @ (66, 5)
							funccall
								id [isspace] @ (66, 6)
								actuals
									id [ch] @ (66, 14)
						block
							break
			if
				== @ (71, 7)
					id [ch] @ (71, 4)
					id [EOF] @ (71, 10)
				block
					return
						id [TK_EOF] @ (71, 25)
			if
				== @ (72, 7)
					id [ch] @ (72, 4)
					id [ASCII_NL] @ (72, 10)
				block
					return
						id [TK_EOLN] @ (72, 29)
			if
				== @ (73, 7)
					id [ch] @ (73, 4)
					id [ASCII_PLUS] @ (73, 10)
				block
					return
						id [TK_ADD] @ (73, 31)
			if
				== @ (74, 7)
					id [ch] @ (74, 4)
					id [ASCII_MINUS] @ (74, 10)
				block
					return
						id [TK_SUB] @ (74, 32)
			if
				== @ (75, 7)
					id [ch] @ (75, 4)
					id [ASCII_STAR] @ (75, 10)
				block
					return
						id [TK_MUL] @ (75, 31)
			if
				== @ (76, 7)
					id [ch] @ (76, 4)
					id [ASCII_SLASH] @ (76, 10)
				block
					return
						id [TK_DIV] @ (76, 32)
			if
				== @ (77, 7)
					id [ch] @ (77, 4)
					id [ASCII_LPAREN] @ (77, 10)
				block
					return
						id [TK_LPAREN] @ (77, 33)
			if
				== @ (78, 7)
					id [ch] @ (78, 4)
					id [ASCII_RPAREN] @ (78, 10)
				block
					return
						id [TK_RPAREN] @ (78, 33)
			if
				funccall
					id [isdigit] @ (80, 4)
					actuals
						id [ch] @ (80, 12)
				block
					= @ (81, 7)
						id [attr] @ (81, 2)
						int [0] @ (81, 9)
					for
						funccall
							id [isdigit] @ (82, 6)
							actuals
								id [ch] @ (82, 14)
						block
							= @ (83, 8)
								id [attr] @ (83, 3)
								+ @ (83, 20)
									* @ (83, 15)
										id [attr] @ (83, 10)
										int [10] @ (83, 17)
									- @ (83, 26)
										id [ch] @ (83, 23)
										id [ASCII_0] @ (83, 28)
							= @ (84, 6)
								id [ch] @ (84, 3)
								funccall
									id [getc] @ (84, 8)
									actuals
					funccall
						id [ungetc] @ (86, 2)
						actuals
							id [ch] @ (86, 9)
					return
						id [TK_NUMBER] @ (87, 9)
			funccall
				id [prints] @ (90, 1)
				actuals
					string [Error: invalid character.\n] @ (90, 9)
			funccall
				id [halt] @ (91, 1)
				actuals
	func
		newid [isdigit] @ (94, 5)
		sig
			formals
				formal
					newid [ch] @ (94, 13)
					typeid [int] @ (94, 16)
			typeid [bool] @ (94, 21)
		block
			return
				&& @ (95, 22)
					>= @ (95, 11)
						id [ch] @ (95, 8)
						id [ASCII_0] @ (95, 14)
					<= @ (95, 28)
						id [ch] @ (95, 25)
						id [ASCII_9] @ (95, 31)
	func
		newid [isspace] @ (98, 5)
		sig
			formals
				formal
					newid [ch] @ (98, 13)
					typeid [int] @ (98, 16)
			typeid [bool] @ (98, 21)
		block
			return
				|| @ (100, 24)
					|| @ (99, 26)
						== @ (99, 11)
							id [ch] @ (99, 8)
							id [ASCII_SPACE] @ (99, 14)
						== @ (100, 11)
							id [ch] @ (100, 8)
							id [ASCII_TAB] @ (100, 14)
					== @ (101, 11)
						id [ch] @ (101, 8)
						id [ASCII_CR] @ (101, 14)
	func
		newid [parser] @ (108, 5)
		sig
			formals
			typeid [$void]
		block
			var
				newid [result] @ (109, 5)
				typeid [int] @ (109, 12)
			for
				!= @ (111, 12)
					funccall
						id [peek] @ (111, 5)
						actuals
					id [TK_EOF] @ (111, 15)
				block
					= @ (112, 9)
						id [result] @ (112, 2)
						funccall
							id [E] @ (112, 11)
							actuals
					funccall
						id [match] @ (113, 2)
						actuals
							id [TK_EOLN] @ (113, 8)
					funccall
						id [prints] @ (115, 2)
						actuals
							string [ = ] @ (115, 10)
					funccall
						id [printi] @ (116, 2)
						actuals
							id [result] @ (116, 9)
					funccall
						id [prints] @ (117, 2)
						actuals
							string [\n] @ (117, 10)
	func
		newid [E] @ (121, 5)
		sig
			formals
			typeid [int] @ (121, 9)
		block
			var
				newid [l] @ (122, 5)
				typeid [int] @ (122, 7)
			var
				newid [r] @ (123, 5)
				typeid [int] @ (123, 7)
			var
				newid [token] @ (124, 5)
				typeid [int] @ (124, 11)
			= @ (126, 3)
				id [l] @ (126, 1)
				funccall
					id [T] @ (126, 5)
					actuals
			for
				|| @ (127, 22)
					== @ (127, 12)
						funccall
							id [peek] @ (127, 5)
							actuals
						id [TK_ADD] @ (127, 15)
					== @ (127, 32)
						funccall
							id [peek] @ (127, 25)
							actuals
						id [TK_SUB] @ (127, 35)
				block
					= @ (128, 8)
						id [token] @ (128, 2)
						funccall
							id [peek] @ (128, 10)
							actuals
					funccall
						id [match] @ (129, 2)
						actuals
							id [token] @ (129, 8)
					= @ (130, 4)
						id [r] @ (130, 2)
						funccall
							id [T] @ (130, 6)
							actuals
					if
						== @ (132, 11)
							id [token] @ (132, 5)
							id [TK_ADD] @ (132, 14)
						block
							= @ (133, 5)
								id [l] @ (133, 3)
								+ @ (133, 9)
									id [l] @ (133, 7)
									id [r] @ (133, 11)
						else
							block
								= @ (135, 5)
									id [l] @ (135, 3)
									- @ (135, 9)
										id [l] @ (135, 7)
										id [r] @ (135, 11)
			return
				id [l] @ (138, 8)
	func
		newid [T] @ (141, 5)
		sig
			formals
			typeid [int] @ (141, 9)
		block
			var
				newid [l] @ (142, 5)
				typeid [int] @ (142, 7)
			var
				newid [r] @ (143, 5)
				typeid [int] @ (143, 7)
			var
				newid [token] @ (144, 5)
				typeid [int] @ (144, 11)
			= @ (146, 3)
				id [l] @ (146, 1)
				funccall
					id [F] @ (146, 5)
					actuals
			for
				|| @ (147, 22)
					== @ (147, 12)
						funccall
							id [peek] @ (147, 5)
							actuals
						id [TK_MUL] @ (147, 15)
					== @ (147, 32)
						funccall
							id [peek] @ (147, 25)
							actuals
						id [TK_DIV] @ (147, 35)
				block
					= @ (148, 8)
						id [token] @ (148, 2)
						funccall
							id [peek] @ (148, 10)
							actuals
					funccall
						id [match] @ (149, 2)
						actuals
							id [token] @ (149, 8)
					= @ (150, 4)
						id [r] @ (150, 2)
						funccall
							id [F] @ (150, 6)
							actuals
					if
						== @ (152, 11)
							id [token] @ (152, 5)
							id [TK_MUL] @ (152, 14)
						block
							= @ (153, 5)
								id [l] @ (153, 3)
								* @ (153, 9)
									id [l] @ (153, 7)
									id [r] @ (153, 11)
						else
							block
								= @ (155, 5)
									id [l] @ (155, 3)
									/ @ (155, 9)
										id [l] @ (155, 7)
										id [r] @ (155, 11)
			return
				id [l] @ (158, 8)
	func
		newid [F] @ (161, 5)
		sig
			formals
			typeid [int] @ (161, 9)
		block
			var
				newid [result] @ (162, 5)
				typeid [int] @ (162, 12)
			var
				newid [token] @ (164, 5)
				typeid [int] @ (164, 11)
			= @ (165, 7)
				id [token] @ (165, 1)
				funccall
					id [peek] @ (165, 9)
					actuals
			if
				== @ (167, 10)
					id [token] @ (167, 4)
					id [TK_LPAREN] @ (167, 13)
				block
					funccall
						id [match] @ (168, 2)
						actuals
							id [TK_LPAREN] @ (168, 8)
					= @ (169, 9)
						id [result] @ (169, 2)
						funccall
							id [E] @ (169, 11)
							actuals
					funccall
						id [match] @ (170, 2)
						actuals
							id [TK_RPAREN] @ (170, 8)
				if
					== @ (172, 17)
						id [token] @ (172, 11)
						id [TK_SUB] @ (172, 20)
					block
						funccall
							id [match] @ (173, 2)
							actuals
								id [TK_SUB] @ (173, 8)
						= @ (174, 9)
							id [result] @ (174, 2)
							- @ (174, 11)
								funccall
									id [F] @ (174, 12)
									actuals
					if
						== @ (176, 17)
							id [token] @ (176, 11)
							id [TK_NUMBER] @ (176, 20)
						block
							funccall
								id [match] @ (177, 2)
								actuals
									id [TK_NUMBER] @ (177, 8)
							= @ (178, 9)
								id [result] @ (178, 2)
								id [attr] @ (178, 11)
						else
							block
								funccall
									id [prints] @ (181, 2)
									actuals
										string [Error: expected factor.\n] @ (181, 10)
								funccall
									id [halt] @ (182, 2)
									actuals
			return
				id [result] @ (184, 8)
	var
		newid [EOF] @ (191, 4)
		typeid [int] @ (191, 8)
	var
		newid [TK_EOF] @ (193, 4)
		typeid [int] @ (193, 11)
	var
		newid [TK_EOLN] @ (194, 4)
		typeid [int] @ (194, 12)
	var
		newid [TK_NUMBER] @ (195, 4)
		typeid [int] @ (195, 14)
	var
		newid [TK_ADD] @ (196, 4)
		typeid [int] @ (196, 11)
	var
		newid [TK_SUB] @ (197, 4)
		typeid [int] @ (197, 11)
	var
		newid [TK_MUL] @ (198, 4)
		typeid [int] @ (198, 11)
	var
		newid [TK_DIV] @ (199, 4)
		typeid [int] @ (199, 11)
	var
		newid [TK_LPAREN] @ (200, 4)
		typeid [int] @ (200, 14)
	var
		newid [TK_RPAREN] @ (201, 4)
		typeid [int] @ (201, 14)
	var
		newid [ASCII_0] @ (203, 4)
		typeid [int] @ (203, 12)
	var
		newid [ASCII_9] @ (204, 4)
		typeid [int] @ (204, 12)
	var
		newid [ASCII_PLUS] @ (205, 4)
		typeid [int] @ (205, 15)
	var
		newid [ASCII_MINUS] @ (206, 4)
		typeid [int] @ (206, 16)
	var
		newid [ASCII_STAR] @ (207, 4)
		typeid [int] @ (207, 15)
	var
		newid [ASCII_SLASH] @ (208, 4)
		typeid [int] @ (208, 16)
	var
		newid [ASCII_LPAREN] @ (209, 4)
		typeid [int] @ (209, 17)
	var
		newid [ASCII_RPAREN] @ (210, 4)
		typeid [int] @ (210, 17)
	var
		newid [ASCII_SPACE] @ (211, 4)
		typeid [int] @ (211, 16)
	var
		newid [ASCII_TAB] @ (212, 4)
		typeid [int] @ (212, 14)
	var
		newid [ASCII_CR] @ (213, 4)
		typeid [int] @ (213, 13)
	var
		newid [ASCII_NL] @ (214, 4)
		typeid [int] @ (214, 13)
	func
		newid [init] @ (216, 5)
		sig
			formals
			typeid [$void]
		block
			= @ (217, 5)
				id [EOF] @ (217, 1)
				- @ (217, 7)
					int [1] @ (217, 8)
			= @ (219, 9)
				id [ASCII_0] @ (219, 1)
				int [48] @ (219, 11)
			= @ (220, 9)
				id [ASCII_9] @ (220, 1)
				int [57] @ (220, 11)
			= @ (221, 12)
				id [ASCII_PLUS] @ (221, 1)
				int [43] @ (221, 14)
			= @ (222, 13)
				id [ASCII_MINUS] @ (222, 1)
				int [45] @ (222, 15)
			= @ (223, 12)
				id [ASCII_STAR] @ (223, 1)
				int [42] @ (223, 14)
			= @ (224, 13)
				id [ASCII_SLASH] @ (224, 1)
				int [47] @ (224, 15)
			= @ (225, 14)
				id [ASCII_LPAREN] @ (225, 1)
				int [40] @ (225, 16)
			= @ (226, 14)
				id [ASCII_RPAREN] @ (226, 1)
				int [41] @ (226, 16)
			= @ (227, 13)
				id [ASCII_SPACE] @ (227, 1)
				int [32] @ (227, 15)
			= @ (228, 11)
				id [ASCII_TAB] @ (228, 1)
				int [9] @ (228, 13)
			= @ (229, 10)
				id [ASCII_CR] @ (229, 1)
				int [13] @ (229, 12)
			= @ (230, 10)
				id [ASCII_NL] @ (230, 1)
				int [10] @ (230, 12)
			= @ (232, 8)
				id [TK_EOF] @ (232, 1)
				int [256] @ (232, 10)
			= @ (233, 11)
				id [TK_NUMBER] @ (233, 1)
				int [257] @ (233, 13)
			= @ (234, 8)
				id [TK_ADD] @ (234, 1)
				id [ASCII_PLUS] @ (234, 10)
			= @ (235, 8)
				id [TK_SUB] @ (235, 1)
				id [ASCII_MINUS] @ (235, 10)
			= @ (236, 8)
				id [TK_MUL] @ (236, 1)
				id [ASCII_STAR] @ (236, 10)
			= @ (237, 8)
				id [TK_DIV] @ (237, 1)
				id [ASCII_SLASH] @ (237, 10)
			= @ (238, 11)
				id [TK_LPAREN] @ (238, 1)
				id [ASCII_LPAREN] @ (238, 13)
			= @ (239, 11)
				id [TK_RPAREN] @ (239, 1)
				id [ASCII_RPAREN] @ (239, 13)
			= @ (240, 9)
				id [TK_EOLN] @ (240, 1)
				id [ASCII_NL] @ (240, 11)


STDERR:


RETURN CODE: 0

Run ended on Tue Feb 28 15:37:40 2023

