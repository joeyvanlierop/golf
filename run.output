Run started on Tue Feb 28 15:50:03 2023

Hostname: csx2.cs.ucalgary.ca

-------------------------------------------------------------------------------
Running make |
--------------

% /usr/bin/make

STDOUT:
g++ -c src/parser.cpp
g++ -g golf.o lexer.o token.o logger.o filereader.o ast.o parser.o -o golf


STDERR:
src/parser.cpp: In member function ‘Token Parser::consume(TokenType)’:
src/parser.cpp:62:1: warning: control reaches end of non-void function [-Wreturn-type]
   62 | }
      | ^
src/parser.cpp: In member function ‘AST* Parser::operand()’:
src/parser.cpp:514:1: warning: control reaches end of non-void function [-Wreturn-type]
  514 | }
      | ^


RETURN CODE: 0

-------------------------------------------------------------------------------
Locating GoLF compiler |
------------------------

Compiler will be run as ./golf

-------------------------------------------------------------------------------
Test: too few arguments |
-------------------------

% ./golf

STDOUT:
Usage: ./golf [filename]


STDERR:


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: too many arguments |
--------------------------

% ./golf /dev/null /dev/zero

STDOUT:
Usage: ./golf [filename]


STDERR:


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: nonexistent file |
------------------------

% ./golf /i/do/not/exist

STDOUT:


STDERR:
File /i/do/not/exist not found: "/home/ugb/joseph.vanlierop/Documents/cpsc-411"


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func open brace in wrong place |
--------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t1

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t1:3:12
  | 
3 | func main()
  |            ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" open brace exception |
----------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t2

STDOUT:
program
	func @ (4, 0)
		newid [main] @ (4, 5)
		sig
			formals
			typeid [$void]
		block
			for @ (5, 1)
				id [$true]
				block
					emptystmt


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: "for" open brace in wrong place |
---------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t3

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t3:4:10
  | 
4 | 	for true
  |          ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" open brace in wrong place |
--------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t4

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t4:4:9
  | 
4 | 	if true
  |         ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: weird but correct formatting |
------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t5

STDOUT:
program
	func @ (3, 0)
		newid [main] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			if @ (5, 1)
				== @ (6, 4)
					+ @ (5, 6)
						int [2] @ (5, 4)
						int [3] @ (6, 2)
					int [5] @ (7, 3)
				block
					emptystmt


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: precedence check |
------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t6

STDOUT:
program
	func @ (4, 0)
		newid [foo] @ (4, 5)
		sig
			formals
			typeid [asdf] @ (4, 11)
		block
			= @ (5, 3)
				id [x] @ (5, 1)
				+ @ (5, 7)
					int [2] @ (5, 5)
					* @ (5, 11)
						int [3] @ (5, 9)
						int [5] @ (5, 13)
			= @ (6, 3)
				id [y] @ (6, 1)
				* @ (6, 13)
					+ @ (6, 8)
						int [2] @ (6, 6)
						int [3] @ (6, 10)
					int [5] @ (6, 15)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: formal and actual params |
--------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t7

STDOUT:
program
	func @ (3, 0)
		newid [foo] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			emptystmt
	func @ (6, 0)
		newid [bar] @ (6, 5)
		sig
			formals
				formal
					newid [a1] @ (6, 9)
					typeid [int] @ (6, 12)
				formal
					newid [a2] @ (6, 17)
					typeid [bool] @ (6, 20)
				formal
					newid [a3] @ (6, 26)
					typeid [sometype] @ (6, 29)
			typeid [returntype] @ (6, 39)
		block
			emptystmt
	func @ (9, 0)
		newid [baz] @ (9, 5)
		sig
			formals
			typeid [int] @ (9, 11)
		block
			funccall
				id [blarg] @ (10, 1)
				actuals
					+ @ (11, 6)
						int [123] @ (11, 2)
						int [456] @ (11, 8)
					funccall
						id [garble] @ (12, 2)
						actuals
							int [789] @ (12, 9)
					id [true] @ (13, 2)
					funccall
						id [greep] @ (14, 2)
						actuals
							id [false] @ (14, 8)
							string [eek] @ (14, 16)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: unary and binary minus |
------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t8

STDOUT:
program
	func @ (3, 0)
		newid [main] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			= @ (4, 10)
				id [x] @ (4, 8)
				- @ (4, 13)
					id [a] @ (4, 12)
					u- @ (4, 14)
						int [123] @ (4, 15)
			= @ (5, 10)
				id [x] @ (5, 8)
				- @ (5, 13)
					id [a] @ (5, 12)
					u- @ (5, 14)
						int [123] @ (5, 16)
			= @ (6, 10)
				id [x] @ (6, 8)
				- @ (6, 13)
					id [a] @ (6, 12)
					u- @ (6, 14)
						u- @ (6, 15)
							int [123] @ (6, 16)
			= @ (7, 10)
				id [x] @ (7, 8)
				- @ (7, 13)
					id [a] @ (7, 12)
					u- @ (7, 14)
						id [b] @ (7, 15)
			= @ (8, 10)
				id [x] @ (8, 8)
				u- @ (8, 12)
					u- @ (8, 13)
						u- @ (8, 14)
							u- @ (8, 15)
								u- @ (8, 16)
									u- @ (8, 17)
										u- @ (8, 18)
											id [x] @ (8, 19)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func open brace in wrong place, with semicolon |
------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t9

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t9:4:12
  | 
4 | func main();
  |            ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func open brace with bonus semicolon |
--------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t10

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t10:4:12
  | 
4 | func main(); {
  |            ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" open brace in wrong place, with semicolon |
-------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t11

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t11:5:10
  | 
5 | 	for true;
  |          ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" with bonus semicolon |
----------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t12

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t12:5:10
  | 
5 | 	for true; {
  |          ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" open brace in wrong place, with semicolon |
------------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t13

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t13:5:9
  | 
5 | 	if true;
  |         ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" with bonus semicolon |
---------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t14

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t14:5:9
  | 
5 | 	if true; {
  |         ^ error: expected {, got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func line breaks using trailing commas |
----------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t15

STDOUT:
program
	func @ (3, 0)
		newid [foo] @ (3, 5)
		sig
			formals
				formal
					newid [a] @ (3, 9)
					typeid [int] @ (3, 11)
				formal
					newid [b] @ (4, 1)
					typeid [int] @ (4, 3)
				formal
					newid [c] @ (5, 1)
					typeid [int] @ (5, 3)
			typeid [$void]
		block
			emptystmt


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func line breaks sans trailing comma |
--------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t16

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t16:6:7
  | 
6 | 	c int
  |       ^ error: expected ), got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: func call line breaks with trailing commas |
--------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t17

STDOUT:
program
	func @ (3, 0)
		newid [foo] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			funccall
				id [garbled] @ (4, 1)
				actuals
					id [a] @ (4, 9)
					id [b] @ (5, 2)
					id [c] @ (6, 2)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: func call line breaks sans trailing comma |
-------------------------------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t18

STDOUT:


STDERR:
--> /home/profs/aycock/411/TEST/ms2/parse.t18:7:4
  | 
7 | 		c
  |    ^ error: expected ), got ;


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: legit syntax salad |
--------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t19

STDOUT:
program
	func @ (3, 0)
		newid [asdf] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			var @ (4, 1)
				newid [i] @ (4, 5)
				typeid [int] @ (4, 7)
			emptystmt
			= @ (6, 3)
				id [x] @ (6, 1)
				int [123] @ (6, 5)
			funccall
				id [foo] @ (7, 1)
				actuals
					id [d] @ (7, 5)
			funccall
				id [bar] @ (8, 4)
				actuals
					id [d] @ (8, 11)
			return @ (9, 1)
			return @ (10, 1)
				int [12345] @ (10, 8)
			break @ (11, 1)
			block
				id [ego] @ (13, 2)
			if @ (15, 1)
				id [true] @ (15, 4)
				block
					int [42] @ (16, 2)
			if @ (18, 1)
				id [false] @ (18, 4)
				block
					int [111] @ (19, 2)
				if @ (20, 8)
					id [fallse] @ (20, 11)
					block
						int [222] @ (21, 2)
					else
						block
							int [333] @ (23, 2)
			if @ (25, 1)
				id [false] @ (25, 5)
				block
					int [444] @ (26, 2)
				else
					block
						int [555] @ (28, 2)
			for @ (30, 1)
				id [$true]
				block
					int [666] @ (31, 2)
			for @ (33, 1)
				id [some_expr] @ (33, 5)
				block
					int [777] @ (34, 2)
			= @ (37, 7)
				string [abc] @ (37, 2)
				id [def] @ (37, 9)
			= @ (38, 16)
				== @ (38, 11)
					+ @ (38, 6)
						id [asdf] @ (38, 1)
						int [12] @ (38, 8)
					int [4] @ (38, 14)
				id [bcd] @ (38, 18)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: assignment |
------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t20

STDOUT:
program
	func @ (3, 0)
		newid [main] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			var @ (4, 1)
				newid [a] @ (4, 5)
				typeid [int] @ (4, 7)
			var @ (5, 1)
				newid [b] @ (5, 5)
				typeid [int] @ (5, 7)
			var @ (6, 1)
				newid [c] @ (6, 5)
				typeid [int] @ (6, 7)
			= @ (7, 3)
				id [a] @ (7, 1)
				= @ (7, 7)
					id [b] @ (7, 5)
					id [c] @ (7, 9)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: associativity test |
--------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/parse.t21

STDOUT:
program
	func @ (3, 0)
		newid [a_sock] @ (3, 5)
		sig
			formals
			typeid [$void]
		block
			var @ (4, 1)
				newid [a] @ (4, 5)
				typeid [int] @ (4, 7)
			var @ (5, 1)
				newid [b] @ (5, 5)
				typeid [int] @ (5, 7)
			var @ (6, 1)
				newid [c] @ (6, 5)
				typeid [int] @ (6, 7)
			var @ (7, 1)
				newid [d] @ (7, 5)
				typeid [int] @ (7, 7)
			var @ (8, 1)
				newid [e] @ (8, 5)
				typeid [int] @ (8, 7)
			+ @ (10, 15)
				+ @ (10, 11)
					+ @ (10, 7)
						+ @ (10, 3)
							id [a] @ (10, 1)
							id [b] @ (10, 5)
						id [c] @ (10, 9)
					id [d] @ (10, 13)
				id [e] @ (10, 17)
			/ @ (11, 15)
				/ @ (11, 11)
					/ @ (11, 7)
						/ @ (11, 3)
							id [a] @ (11, 1)
							id [b] @ (11, 5)
						id [d] @ (11, 9)
					id [d] @ (11, 13)
				id [e] @ (11, 17)


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: a calculated move |
-------------------------

% ./golf /home/profs/aycock/411/TEST/ms2/gen.t18

STDOUT:
program
	func @ (5, 0)
		newid [main] @ (5, 5)
		sig
			formals
			typeid [$void]
		block
			funccall
				id [init] @ (6, 1)
				actuals
			funccall
				id [parser] @ (7, 1)
				actuals
	var @ (14, 0)
		newid [_havechar] @ (14, 4)
		typeid [bool] @ (14, 14)
	var @ (15, 0)
		newid [_char] @ (15, 4)
		typeid [int] @ (15, 10)
	func @ (17, 0)
		newid [getc] @ (17, 5)
		sig
			formals
			typeid [int] @ (17, 12)
		block
			if @ (18, 1)
				id [_havechar] @ (18, 4)
				block
					= @ (19, 12)
						id [_havechar] @ (19, 2)
						id [false] @ (19, 14)
					return @ (20, 2)
						id [_char] @ (20, 9)
			return @ (22, 1)
				funccall
					id [getchar] @ (22, 8)
					actuals
	func @ (25, 0)
		newid [ungetc] @ (25, 5)
		sig
			formals
				formal
					newid [ch] @ (25, 12)
					typeid [int] @ (25, 15)
			typeid [$void]
		block
			if @ (26, 1)
				id [_havechar] @ (26, 4)
				block
					funccall
						id [prints] @ (27, 2)
						actuals
							string [Internal error: too many ungets!\n] @ (27, 10)
					funccall
						id [halt] @ (28, 2)
						actuals
			= @ (30, 11)
				id [_havechar] @ (30, 1)
				id [true] @ (30, 13)
			= @ (31, 7)
				id [_char] @ (31, 1)
				id [ch] @ (31, 9)
	var @ (38, 0)
		newid [_havetoken] @ (38, 4)
		typeid [bool] @ (38, 15)
	var @ (39, 0)
		newid [_token] @ (39, 4)
		typeid [int] @ (39, 11)
	var @ (40, 0)
		newid [attr] @ (40, 4)
		typeid [int] @ (40, 9)
	func @ (42, 0)
		newid [peek] @ (42, 5)
		sig
			formals
			typeid [int] @ (42, 12)
		block
			if @ (43, 1)
				id [_havetoken] @ (43, 4)
				block
					return @ (44, 2)
						id [_token] @ (44, 9)
			= @ (46, 12)
				id [_havetoken] @ (46, 1)
				id [true] @ (46, 14)
			= @ (47, 8)
				id [_token] @ (47, 1)
				funccall
					id [scanner] @ (47, 10)
					actuals
			return @ (48, 1)
				id [_token] @ (48, 8)
	func @ (51, 0)
		newid [match] @ (51, 5)
		sig
			formals
				formal
					newid [expect] @ (51, 11)
					typeid [int] @ (51, 18)
			typeid [$void]
		block
			if @ (52, 1)
				!= @ (52, 11)
					funccall
						id [peek] @ (52, 4)
						actuals
					id [expect] @ (52, 14)
				block
					funccall
						id [prints] @ (53, 2)
						actuals
							string [Error: expected ] @ (53, 10)
					funccall
						id [printc] @ (54, 2)
						actuals
							id [expect] @ (54, 9)
					funccall
						id [prints] @ (55, 2)
						actuals
							string [\n] @ (55, 10)
					funccall
						id [halt] @ (56, 2)
						actuals
			= @ (58, 12)
				id [_havetoken] @ (58, 1)
				id [false] @ (58, 14)
	func @ (61, 0)
		newid [scanner] @ (61, 5)
		sig
			formals
			typeid [int] @ (61, 15)
		block
			var @ (62, 1)
				newid [ch] @ (62, 5)
				typeid [int] @ (62, 8)
			for @ (64, 1)
				id [$true]
				block
					= @ (65, 5)
						id [ch] @ (65, 2)
						funccall
							id [getc] @ (65, 7)
							actuals
					if @ (66, 2)
						! @ (66, 5)
							funccall
								id [isspace] @ (66, 6)
								actuals
									id [ch] @ (66, 14)
						block
							break @ (67, 3)
			if @ (71, 1)
				== @ (71, 7)
					id [ch] @ (71, 4)
					id [EOF] @ (71, 10)
				block
					return @ (71, 18)
						id [TK_EOF] @ (71, 25)
			if @ (72, 1)
				== @ (72, 7)
					id [ch] @ (72, 4)
					id [ASCII_NL] @ (72, 10)
				block
					return @ (72, 22)
						id [TK_EOLN] @ (72, 29)
			if @ (73, 1)
				== @ (73, 7)
					id [ch] @ (73, 4)
					id [ASCII_PLUS] @ (73, 10)
				block
					return @ (73, 24)
						id [TK_ADD] @ (73, 31)
			if @ (74, 1)
				== @ (74, 7)
					id [ch] @ (74, 4)
					id [ASCII_MINUS] @ (74, 10)
				block
					return @ (74, 25)
						id [TK_SUB] @ (74, 32)
			if @ (75, 1)
				== @ (75, 7)
					id [ch] @ (75, 4)
					id [ASCII_STAR] @ (75, 10)
				block
					return @ (75, 24)
						id [TK_MUL] @ (75, 31)
			if @ (76, 1)
				== @ (76, 7)
					id [ch] @ (76, 4)
					id [ASCII_SLASH] @ (76, 10)
				block
					return @ (76, 25)
						id [TK_DIV] @ (76, 32)
			if @ (77, 1)
				== @ (77, 7)
					id [ch] @ (77, 4)
					id [ASCII_LPAREN] @ (77, 10)
				block
					return @ (77, 26)
						id [TK_LPAREN] @ (77, 33)
			if @ (78, 1)
				== @ (78, 7)
					id [ch] @ (78, 4)
					id [ASCII_RPAREN] @ (78, 10)
				block
					return @ (78, 26)
						id [TK_RPAREN] @ (78, 33)
			if @ (80, 1)
				funccall
					id [isdigit] @ (80, 4)
					actuals
						id [ch] @ (80, 12)
				block
					= @ (81, 7)
						id [attr] @ (81, 2)
						int [0] @ (81, 9)
					for @ (82, 2)
						funccall
							id [isdigit] @ (82, 6)
							actuals
								id [ch] @ (82, 14)
						block
							= @ (83, 8)
								id [attr] @ (83, 3)
								+ @ (83, 20)
									* @ (83, 15)
										id [attr] @ (83, 10)
										int [10] @ (83, 17)
									- @ (83, 26)
										id [ch] @ (83, 23)
										id [ASCII_0] @ (83, 28)
							= @ (84, 6)
								id [ch] @ (84, 3)
								funccall
									id [getc] @ (84, 8)
									actuals
					funccall
						id [ungetc] @ (86, 2)
						actuals
							id [ch] @ (86, 9)
					return @ (87, 2)
						id [TK_NUMBER] @ (87, 9)
			funccall
				id [prints] @ (90, 1)
				actuals
					string [Error: invalid character.\n] @ (90, 9)
			funccall
				id [halt] @ (91, 1)
				actuals
	func @ (94, 0)
		newid [isdigit] @ (94, 5)
		sig
			formals
				formal
					newid [ch] @ (94, 13)
					typeid [int] @ (94, 16)
			typeid [bool] @ (94, 21)
		block
			return @ (95, 1)
				&& @ (95, 22)
					>= @ (95, 11)
						id [ch] @ (95, 8)
						id [ASCII_0] @ (95, 14)
					<= @ (95, 28)
						id [ch] @ (95, 25)
						id [ASCII_9] @ (95, 31)
	func @ (98, 0)
		newid [isspace] @ (98, 5)
		sig
			formals
				formal
					newid [ch] @ (98, 13)
					typeid [int] @ (98, 16)
			typeid [bool] @ (98, 21)
		block
			return @ (99, 1)
				|| @ (100, 24)
					|| @ (99, 26)
						== @ (99, 11)
							id [ch] @ (99, 8)
							id [ASCII_SPACE] @ (99, 14)
						== @ (100, 11)
							id [ch] @ (100, 8)
							id [ASCII_TAB] @ (100, 14)
					== @ (101, 11)
						id [ch] @ (101, 8)
						id [ASCII_CR] @ (101, 14)
	func @ (108, 0)
		newid [parser] @ (108, 5)
		sig
			formals
			typeid [$void]
		block
			var @ (109, 1)
				newid [result] @ (109, 5)
				typeid [int] @ (109, 12)
			for @ (111, 1)
				!= @ (111, 12)
					funccall
						id [peek] @ (111, 5)
						actuals
					id [TK_EOF] @ (111, 15)
				block
					= @ (112, 9)
						id [result] @ (112, 2)
						funccall
							id [E] @ (112, 11)
							actuals
					funccall
						id [match] @ (113, 2)
						actuals
							id [TK_EOLN] @ (113, 8)
					funccall
						id [prints] @ (115, 2)
						actuals
							string [ = ] @ (115, 10)
					funccall
						id [printi] @ (116, 2)
						actuals
							id [result] @ (116, 9)
					funccall
						id [prints] @ (117, 2)
						actuals
							string [\n] @ (117, 10)
	func @ (121, 0)
		newid [E] @ (121, 5)
		sig
			formals
			typeid [int] @ (121, 9)
		block
			var @ (122, 1)
				newid [l] @ (122, 5)
				typeid [int] @ (122, 7)
			var @ (123, 1)
				newid [r] @ (123, 5)
				typeid [int] @ (123, 7)
			var @ (124, 1)
				newid [token] @ (124, 5)
				typeid [int] @ (124, 11)
			= @ (126, 3)
				id [l] @ (126, 1)
				funccall
					id [T] @ (126, 5)
					actuals
			for @ (127, 1)
				|| @ (127, 22)
					== @ (127, 12)
						funccall
							id [peek] @ (127, 5)
							actuals
						id [TK_ADD] @ (127, 15)
					== @ (127, 32)
						funccall
							id [peek] @ (127, 25)
							actuals
						id [TK_SUB] @ (127, 35)
				block
					= @ (128, 8)
						id [token] @ (128, 2)
						funccall
							id [peek] @ (128, 10)
							actuals
					funccall
						id [match] @ (129, 2)
						actuals
							id [token] @ (129, 8)
					= @ (130, 4)
						id [r] @ (130, 2)
						funccall
							id [T] @ (130, 6)
							actuals
					if @ (132, 2)
						== @ (132, 11)
							id [token] @ (132, 5)
							id [TK_ADD] @ (132, 14)
						block
							= @ (133, 5)
								id [l] @ (133, 3)
								+ @ (133, 9)
									id [l] @ (133, 7)
									id [r] @ (133, 11)
						else
							block
								= @ (135, 5)
									id [l] @ (135, 3)
									- @ (135, 9)
										id [l] @ (135, 7)
										id [r] @ (135, 11)
			return @ (138, 1)
				id [l] @ (138, 8)
	func @ (141, 0)
		newid [T] @ (141, 5)
		sig
			formals
			typeid [int] @ (141, 9)
		block
			var @ (142, 1)
				newid [l] @ (142, 5)
				typeid [int] @ (142, 7)
			var @ (143, 1)
				newid [r] @ (143, 5)
				typeid [int] @ (143, 7)
			var @ (144, 1)
				newid [token] @ (144, 5)
				typeid [int] @ (144, 11)
			= @ (146, 3)
				id [l] @ (146, 1)
				funccall
					id [F] @ (146, 5)
					actuals
			for @ (147, 1)
				|| @ (147, 22)
					== @ (147, 12)
						funccall
							id [peek] @ (147, 5)
							actuals
						id [TK_MUL] @ (147, 15)
					== @ (147, 32)
						funccall
							id [peek] @ (147, 25)
							actuals
						id [TK_DIV] @ (147, 35)
				block
					= @ (148, 8)
						id [token] @ (148, 2)
						funccall
							id [peek] @ (148, 10)
							actuals
					funccall
						id [match] @ (149, 2)
						actuals
							id [token] @ (149, 8)
					= @ (150, 4)
						id [r] @ (150, 2)
						funccall
							id [F] @ (150, 6)
							actuals
					if @ (152, 2)
						== @ (152, 11)
							id [token] @ (152, 5)
							id [TK_MUL] @ (152, 14)
						block
							= @ (153, 5)
								id [l] @ (153, 3)
								* @ (153, 9)
									id [l] @ (153, 7)
									id [r] @ (153, 11)
						else
							block
								= @ (155, 5)
									id [l] @ (155, 3)
									/ @ (155, 9)
										id [l] @ (155, 7)
										id [r] @ (155, 11)
			return @ (158, 1)
				id [l] @ (158, 8)
	func @ (161, 0)
		newid [F] @ (161, 5)
		sig
			formals
			typeid [int] @ (161, 9)
		block
			var @ (162, 1)
				newid [result] @ (162, 5)
				typeid [int] @ (162, 12)
			var @ (164, 1)
				newid [token] @ (164, 5)
				typeid [int] @ (164, 11)
			= @ (165, 7)
				id [token] @ (165, 1)
				funccall
					id [peek] @ (165, 9)
					actuals
			if @ (167, 1)
				== @ (167, 10)
					id [token] @ (167, 4)
					id [TK_LPAREN] @ (167, 13)
				block
					funccall
						id [match] @ (168, 2)
						actuals
							id [TK_LPAREN] @ (168, 8)
					= @ (169, 9)
						id [result] @ (169, 2)
						funccall
							id [E] @ (169, 11)
							actuals
					funccall
						id [match] @ (170, 2)
						actuals
							id [TK_RPAREN] @ (170, 8)
				if @ (172, 8)
					== @ (172, 17)
						id [token] @ (172, 11)
						id [TK_SUB] @ (172, 20)
					block
						funccall
							id [match] @ (173, 2)
							actuals
								id [TK_SUB] @ (173, 8)
						= @ (174, 9)
							id [result] @ (174, 2)
							u- @ (174, 11)
								funccall
									id [F] @ (174, 12)
									actuals
					if @ (176, 8)
						== @ (176, 17)
							id [token] @ (176, 11)
							id [TK_NUMBER] @ (176, 20)
						block
							funccall
								id [match] @ (177, 2)
								actuals
									id [TK_NUMBER] @ (177, 8)
							= @ (178, 9)
								id [result] @ (178, 2)
								id [attr] @ (178, 11)
						else
							block
								funccall
									id [prints] @ (181, 2)
									actuals
										string [Error: expected factor.\n] @ (181, 10)
								funccall
									id [halt] @ (182, 2)
									actuals
			return @ (184, 1)
				id [result] @ (184, 8)
	var @ (191, 0)
		newid [EOF] @ (191, 4)
		typeid [int] @ (191, 8)
	var @ (193, 0)
		newid [TK_EOF] @ (193, 4)
		typeid [int] @ (193, 11)
	var @ (194, 0)
		newid [TK_EOLN] @ (194, 4)
		typeid [int] @ (194, 12)
	var @ (195, 0)
		newid [TK_NUMBER] @ (195, 4)
		typeid [int] @ (195, 14)
	var @ (196, 0)
		newid [TK_ADD] @ (196, 4)
		typeid [int] @ (196, 11)
	var @ (197, 0)
		newid [TK_SUB] @ (197, 4)
		typeid [int] @ (197, 11)
	var @ (198, 0)
		newid [TK_MUL] @ (198, 4)
		typeid [int] @ (198, 11)
	var @ (199, 0)
		newid [TK_DIV] @ (199, 4)
		typeid [int] @ (199, 11)
	var @ (200, 0)
		newid [TK_LPAREN] @ (200, 4)
		typeid [int] @ (200, 14)
	var @ (201, 0)
		newid [TK_RPAREN] @ (201, 4)
		typeid [int] @ (201, 14)
	var @ (203, 0)
		newid [ASCII_0] @ (203, 4)
		typeid [int] @ (203, 12)
	var @ (204, 0)
		newid [ASCII_9] @ (204, 4)
		typeid [int] @ (204, 12)
	var @ (205, 0)
		newid [ASCII_PLUS] @ (205, 4)
		typeid [int] @ (205, 15)
	var @ (206, 0)
		newid [ASCII_MINUS] @ (206, 4)
		typeid [int] @ (206, 16)
	var @ (207, 0)
		newid [ASCII_STAR] @ (207, 4)
		typeid [int] @ (207, 15)
	var @ (208, 0)
		newid [ASCII_SLASH] @ (208, 4)
		typeid [int] @ (208, 16)
	var @ (209, 0)
		newid [ASCII_LPAREN] @ (209, 4)
		typeid [int] @ (209, 17)
	var @ (210, 0)
		newid [ASCII_RPAREN] @ (210, 4)
		typeid [int] @ (210, 17)
	var @ (211, 0)
		newid [ASCII_SPACE] @ (211, 4)
		typeid [int] @ (211, 16)
	var @ (212, 0)
		newid [ASCII_TAB] @ (212, 4)
		typeid [int] @ (212, 14)
	var @ (213, 0)
		newid [ASCII_CR] @ (213, 4)
		typeid [int] @ (213, 13)
	var @ (214, 0)
		newid [ASCII_NL] @ (214, 4)
		typeid [int] @ (214, 13)
	func @ (216, 0)
		newid [init] @ (216, 5)
		sig
			formals
			typeid [$void]
		block
			= @ (217, 5)
				id [EOF] @ (217, 1)
				u- @ (217, 7)
					int [1] @ (217, 8)
			= @ (219, 9)
				id [ASCII_0] @ (219, 1)
				int [48] @ (219, 11)
			= @ (220, 9)
				id [ASCII_9] @ (220, 1)
				int [57] @ (220, 11)
			= @ (221, 12)
				id [ASCII_PLUS] @ (221, 1)
				int [43] @ (221, 14)
			= @ (222, 13)
				id [ASCII_MINUS] @ (222, 1)
				int [45] @ (222, 15)
			= @ (223, 12)
				id [ASCII_STAR] @ (223, 1)
				int [42] @ (223, 14)
			= @ (224, 13)
				id [ASCII_SLASH] @ (224, 1)
				int [47] @ (224, 15)
			= @ (225, 14)
				id [ASCII_LPAREN] @ (225, 1)
				int [40] @ (225, 16)
			= @ (226, 14)
				id [ASCII_RPAREN] @ (226, 1)
				int [41] @ (226, 16)
			= @ (227, 13)
				id [ASCII_SPACE] @ (227, 1)
				int [32] @ (227, 15)
			= @ (228, 11)
				id [ASCII_TAB] @ (228, 1)
				int [9] @ (228, 13)
			= @ (229, 10)
				id [ASCII_CR] @ (229, 1)
				int [13] @ (229, 12)
			= @ (230, 10)
				id [ASCII_NL] @ (230, 1)
				int [10] @ (230, 12)
			= @ (232, 8)
				id [TK_EOF] @ (232, 1)
				int [256] @ (232, 10)
			= @ (233, 11)
				id [TK_NUMBER] @ (233, 1)
				int [257] @ (233, 13)
			= @ (234, 8)
				id [TK_ADD] @ (234, 1)
				id [ASCII_PLUS] @ (234, 10)
			= @ (235, 8)
				id [TK_SUB] @ (235, 1)
				id [ASCII_MINUS] @ (235, 10)
			= @ (236, 8)
				id [TK_MUL] @ (236, 1)
				id [ASCII_STAR] @ (236, 10)
			= @ (237, 8)
				id [TK_DIV] @ (237, 1)
				id [ASCII_SLASH] @ (237, 10)
			= @ (238, 11)
				id [TK_LPAREN] @ (238, 1)
				id [ASCII_LPAREN] @ (238, 13)
			= @ (239, 11)
				id [TK_RPAREN] @ (239, 1)
				id [ASCII_RPAREN] @ (239, 13)
			= @ (240, 9)
				id [TK_EOLN] @ (240, 1)
				id [ASCII_NL] @ (240, 11)


STDERR:


RETURN CODE: 0

Run ended on Tue Feb 28 15:50:04 2023

